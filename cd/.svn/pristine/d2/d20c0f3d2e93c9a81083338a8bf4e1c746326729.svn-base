package com.wk.cd.module.xml;

import com.wk.cd.common.util.Assert;
import com.wk.cd.module.bean.ParamInCmdBean;
import com.wk.cd.module.exc.CmdParamIsNotExistException;
import com.wk.cd.module.info.ParamInfo;
import com.wk.logging.Log;
import com.wk.logging.LogFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class XmlSystemParamUtils {
	private static final Log logger = LogFactory.getLog();

	public static List<ParamInfo> getFixedParam() {
		List<ParamInfo> list = new ArrayList<ParamInfo>();
		ParamInfo param_bean = new ParamInfo();
		param_bean.setParam_name("update_local_dir");
		param_bean.setParam_value("module/testExecute/");
		list.add(param_bean);
		return list;
	}

	public static List<ParamInfo> replaceParamValue(List<ParamInfo> params,
			List<ParamInfo> system_param) {
		logger.debug("replaceParamValue begine");
		if ((Assert.isEmpty(params)) || (Assert.isEmpty(system_param))) {
			logger.debug("no param");
			return params;
		}
		List<ParamInfo> list = new ArrayList<ParamInfo>();
		for (ParamInfo info : params) {
			String value = info.getParam_value();
			ParamInfo pi = ParamInfo.copy(info);
			pi.setParam_value(replaceValue(value, system_param));
			list.add(pi);
		}
		logger.debug("replaceParamValue end");
		return list;
	}

	public static List<ParamInfo> splitMultiParams(List<ParamInfo> params) {
		List<ParamInfo> result = new ArrayList<ParamInfo>();
		if (!Assert.isEmpty(params)) {
			for (ParamInfo param : params) {
				String value = param.getParam_value();
				if (value.contains(";")) {
					String[] values = value.split(";");
					int index = 1;
					for (String str : values) {
						ParamInfo p = ParamInfo.copy(param);
						p.setParam_value(str);
						p.setIndex(index++);
						result.add(p);
					}
				} else {
					result.add(param);
				}
			}
		}
		return result;
	}

	public static void main(String[] args) {
		List<ParamInfo> params = new ArrayList<ParamInfo>();
		List<ParamInfo> system_param = new ArrayList<ParamInfo>();
		ParamInfo info = new ParamInfo();
		info.setParam_value("value${task_no}ddd");
		info.setParam_group("group");
		info.setParam_name("name");
		params.add(info);

		ParamInfo info1 = new ParamInfo();
		info1.setParam_value("kskskskks");
		info1.setParam_name("task_no");
		system_param.add(info1);

		List<ParamInfo> list = replaceParamValue(params, system_param);
		for (ParamInfo i : list) {
			System.out.println(i.getParam_group());
			System.out.println(i.getParam_name());
			System.out.println(i.getParam_value());
		}
	}

	private static String replaceValue(String value, List<ParamInfo> params) {
		List<String> param_in_value = getSysParamInValue(value);

		if (Assert.isEmpty(param_in_value)) {
			return value;
		}
		if (Assert.isEmpty(params)) {
			throw new CmdParamIsNotExistException().addScene("PARAM", value);
		}

		List<List<ParamInCmdBean>> params_needs = getUsefulParam(
				param_in_value, params);

		List<String> result_cmd = replaceParamInCmd(value, params_needs);
		StringBuffer sb = new StringBuffer();
		for (String v : result_cmd) {
			sb.append(v + "-,-");
		}
		return sb.toString();
	}

	private static List<String> getSysParamInValue(String value) {
		List<String> param_list = new ArrayList<String>();

		String match_group = "\\$\\{\\s*\\w+\\.\\w+\\s*\\}";
		Pattern regex_group = Pattern.compile(match_group);
		Matcher m_group = regex_group.matcher(value);

		while (m_group.find()) {
			String param_group = m_group.group().substring(2,
					m_group.group().length() - 1);
			if (!param_list.contains(param_group)) {
				param_list.add(param_group.trim());
			}
		}

		String match_single = "\\$\\{\\s*\\w+\\s*\\}";
		Pattern regex_single = Pattern.compile(match_single);
		Matcher m_single = regex_single.matcher(value);

		while (m_single.find()) {
			String param_single = m_single.group().substring(2,
					m_single.group().length() - 1);
			if (!param_list.contains(param_single)) {
				param_list.add(param_single.trim());
			}
		}
		return param_list;
	}

	private static List<List<ParamInCmdBean>> getUsefulParam(
			List<String> param_in_cmd, List<ParamInfo> params) {
		List<List<ParamInCmdBean>> list_father = new ArrayList<List<ParamInCmdBean>>();

		List<ParamInCmdBean> list_cmd = ParamInCmdBean.coypList(params);
		for (String param : param_in_cmd) {
			List<ParamInCmdBean> params_return = new ArrayList<ParamInCmdBean>();
			for (ParamInCmdBean bean : list_cmd) {
				String param_name = bean.getParam_name();
				String group = bean.getGroup();
				if (Assert.isEmpty(group)) {
					if (param.equals(param_name)) {
						params_return.add(bean);
					}
				} else if (param.equals(group + "." + param_name)) {
					params_return.add(bean);
				}

			}

			if (Assert.isEmpty(params_return)) {
				throw new CmdParamIsNotExistException()
						.addScene("PARAM", param);
			}
			list_father.add(params_return);
		}

		return paramFilter(descartes(list_father));
	}

	private static List<String> replaceParamInCmd(String value,
			List<List<ParamInCmdBean>> params) {
		List<String> result_cmd = new ArrayList<String>();
		if (Assert.isEmpty(params)) {
			result_cmd.add(value);
			return result_cmd;
		}
		for (List<ParamInCmdBean> list : params) {
			String merged_cmd = replaceCmd(list, value);

			result_cmd.add(merged_cmd);
		}

		return result_cmd;
	}

	/**
	 * Description: 将参数对 进行笛卡尔乘积
	 * 
	 * @param crossArgs
	 * @return
	 */
	private static List<List<ParamInCmdBean>> descartes(
			List<List<ParamInCmdBean>> params) {
		// 计算出笛卡尔积行数
		int rows = params.size() > 0 ? 1 : 0;

		for (List<ParamInCmdBean> data : params) {
			rows *= data.size();
		}
		// 笛卡尔积索引记录
		int[] record = new int[params.size()];
		List<List<ParamInCmdBean>> results = new ArrayList<List<ParamInCmdBean>>();
		// 产生笛卡尔积
		for (int i = 0; i < rows; i++) {
			List<ParamInCmdBean> row = new ArrayList<ParamInCmdBean>();
			// 生成笛卡尔积的每组数据
			for (int index = 0; index < record.length; index++) {
				row.add(params.get(index).get(record[index]));
			}
			results.add(row);
			descartesRecord(params, record, params.size() - 1);
		}
		return results;
	}

	private static void descartesRecord(List<List<ParamInCmdBean>> sourceArgs,
			int[] record, int level) {
		record[level] = record[level] + 1;
		if (record[level] >= sourceArgs.get(level).size() && level > 0) {
			record[level] = 0;
			descartesRecord(sourceArgs, record, level - 1);
		}
	}

	private static List<List<ParamInCmdBean>> paramFilter(
			List<List<ParamInCmdBean>> params) {
		List<List<ParamInCmdBean>> results = new ArrayList<List<ParamInCmdBean>>();
		for (List<ParamInCmdBean> list : params) {
			if (checkParam(list)) {
				results.add(list);
			}
		}
		return results;
	}

	/**
	 * Description: 校验具体参数列表中 所有成对的参数 是否序号一致
	 * 
	 * @param param
	 * @return
	 */
	private static boolean checkParam(List<ParamInCmdBean> param) {
		List<List<ParamInCmdBean>> list_father = splitByInstacneParam(param);
		for (List<ParamInCmdBean> list : list_father) {
			if (!check(list)) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Description: 校验参数中需要是否一致
	 * 
	 * @param param
	 * @return
	 */
	private static boolean check(List<ParamInCmdBean> param) {
		int index = param.get(0).getIndex();
		for (ParamInCmdBean info : param) {
			if (info.getIndex() != index) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Description: 把参数按照 instance_param_name分组
	 * 
	 * @param param_group_list
	 * @return
	 */
	private static List<List<ParamInCmdBean>> splitByInstacneParam(
			List<ParamInCmdBean> param_group_list) {
		List<String> param_list = getInstance(param_group_list);
		List<List<ParamInCmdBean>> list_father = new ArrayList<List<ParamInCmdBean>>();
		for (String param_name : param_list) {
			List<ParamInCmdBean> list_child = new ArrayList<ParamInCmdBean>();
			for (ParamInCmdBean info : param_group_list) {
				if (info.getParam_name().equals(param_name)) {
					list_child.add(info);
				}
			}
			list_father.add(list_child);
		}
		return list_father;
	}

	/**
	 * Description: 获取实例参数名 并且去除重复的
	 * 
	 * @param param_group_list
	 * @return
	 */
	private static List<String> getInstance(
			List<ParamInCmdBean> param_group_list) {
		List<String> param_list = new ArrayList<String>();
		for (ParamInCmdBean info : param_group_list) {
			String instance_param_name = info.getParam_name();
			if (!param_list.contains(instance_param_name)) {
				param_list.add(instance_param_name);
			}
		}
		return param_list;
	}

	/**
	 * Description: 替换具体命令
	 * 
	 * @param list
	 * @param cmd
	 * @return
	 */
	private static String replaceCmd(List<ParamInCmdBean> list, String cmd) {
		String cmd_temp = cmd;
		for (ParamInCmdBean info : list) {
			String group = info.getGroup();
			String match = "";
			if (Assert.isEmpty(group))
				match = "\\$\\{\\s*" + info.getParam_name() + "\\s*\\}";
			else {
				match = "\\$\\{\\s*" + info.getGroup() + "."
						+ info.getParam_name() + "\\s*\\}";
			}
			Pattern var_regex = Pattern.compile(match);
			Matcher m = var_regex.matcher(cmd_temp);
			if (m.find()) {
				cmd_temp = m.replaceAll(info.getParam_value());
			}
		}
		return cmd_temp;
	}
}