package com.wk.cd.module.action;

import java.util.ArrayList;
import java.util.List;

import com.wk.cd.common.util.Assert;
import com.wk.cd.enu.MODULE_TYPE;
import com.wk.cd.enu.PUBLISH_STATE;
import com.wk.cd.enu.TEMPLATE_FORMATE;
import com.wk.cd.module.bean.UpdateTemplateInputBean;
import com.wk.cd.module.bean.UpdateTemplateOutputBean;
import com.wk.cd.module.dao.MoTemplateDaoService;
import com.wk.cd.module.info.MoTemplateInfo;
import com.wk.cd.module.info.TemplateInfo;
import com.wk.cd.module.service.ModuleCommonService;
import com.wk.cd.module.service.TemplateService;
import com.wk.cd.module.xml.XmlPathUtil;
import com.wk.cd.module.xml.XmlWriter;
import com.wk.cd.service.ActionBasic;
import com.wk.cd.system.lg.service.ActionLogPublicService;
import com.wk.lang.Inject;
import com.wk.logging.Log;
import com.wk.logging.LogFactory;

/**
 * 修改流程模板
 * Class Description: 
 * @author 12049
 */
public class UpdateTemplateAction extends ActionBasic<UpdateTemplateInputBean, UpdateTemplateOutputBean> {

	@Inject
	private ActionLogPublicService lgsvc;

	@Inject
	private TemplateService tpTemplateService;

	@Inject
	private MoTemplateDaoService tpTemplateDaoService;

	@Inject
	private ModuleCommonService componentPublicService;
	private static final Log logger = LogFactory.getLog();

	protected UpdateTemplateOutputBean doAction(UpdateTemplateInputBean input) {
		logger.info("-----UpdateTemplateAction Begin-----");
		UpdateTemplateOutputBean output = new UpdateTemplateOutputBean();
		TemplateInfo template = input.getTemplate();

		Assert.assertNotEmpty(template, "模版信息");
		Assert.assertNotEmpty(template.getCn_name(), "模板名");
		Assert.assertNotEmpty(template.getBk_desc(), "模板描述");
		Assert.assertNotEmpty(template.getTemplate_type(), "模板类型");
		Assert.assertNotEmpty(template.getOperating_system(), "操作系统");
		Assert.assertNotEmpty(template.getModules(), "模版配置信息");

		this.tpTemplateService.checkTemplateNameIsExist(template.getCn_name());

		template.setId(this.tpTemplateDaoService.getRefModuleIdByName(template
				.getCn_name()));

		logger.info("开始生成模版配置文件：["
				+ XmlPathUtil.getPathByCompId(template.getId(),
						MODULE_TYPE.TEMPLATE) + "]");
		XmlWriter.writerTemplate(template, template.getId());

		MoTemplateInfo tpTemplateInfo = new MoTemplateInfo();
		tpTemplateInfo.setTemplate_name(template.getCn_name());
		tpTemplateInfo = this.tpTemplateDaoService
				.getInfoByKeyForUpdate(tpTemplateInfo);
		tpTemplateInfo.setTemplate_bk_desc(template.getBk_desc());
		tpTemplateInfo.setTemplate_type(template.getTemplate_type());
		tpTemplateInfo.setOperating_system(this.componentPublicService
				.generateIntString(template.getOperating_system()));
		tpTemplateInfo.setModify_bk_date(input.getDtbs_bk_date());
		tpTemplateInfo.setModify_bk_time(input.getDtbs_bk_time());
		tpTemplateInfo.setModify_user_id(input.getOrg_user_id());
		tpTemplateInfo.setTemplate_formate(TEMPLATE_FORMATE.XML);
		tpTemplateInfo.setPublish_state(PUBLISH_STATE.YES);
		logger.info("开始更新投产模板表,TEMPLATE_NAME：[" + template.getCn_name() + "]");
		this.tpTemplateDaoService.updateTmplateInfo(tpTemplateInfo);

		this.componentPublicService.saveCompQuoteMsg(template.getModules(),
				template.getId(), MODULE_TYPE.TEMPLATE);
		logger.info("-----UpdateTemplateAction End-----");
		return output;
	}

	protected String getLogTxt(UpdateTemplateInputBean input) {
		List<String> log_lst = new ArrayList<String>();
		return this.lgsvc.getLogTxt("修改流程模板", log_lst);
	}
}