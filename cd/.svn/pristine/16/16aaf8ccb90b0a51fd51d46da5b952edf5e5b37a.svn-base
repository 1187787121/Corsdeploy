/**
 * Title: FileTool.java
 * File Description: File工具类
 * @copyright 2014 
 * @company CORSWORK
 * @author lixl
 * @version 1.0
 * @date 12/1/2014
 */

package com.wk.cd.common.util;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.text.DecimalFormat;

import com.wk.cd.exc.FileNotExistException;
import com.wk.util.FileUtil;

/**
 * Class Description: File工具类
 * @author lixl
 */
public class FileTool {
	private static final String LINE_SPE = "/";
	private static final int MAX_BF_LEN = 1024 * 1024;

	/**
	 * 转换文件路径 "\\"转换为"/"
	 * @author lixl (2014-12-1)
	 * @param pathFile
	 * @return String
	 */
	public static String filePathCvt(String pathFile) {
		Assert.assertNotEmpty(pathFile, "pathFile");
		return pathFile.replace("\\", "/");
	}

	/**
	 * 检查本地文件是否存在
	 * @author lixl (2014-12-1)
	 * @param file
	 */
	public static void checkLocalFile(File file) {
		if (Assert.isEmpty(file) || !file.exists()) {
			throw new FileNotExistException().addScene("FILE", "本地文件：" + file.getName());
		}
	}

	/**
	 * 根据文件全路径名称获取文件路径
	 * @author lixl (2014-12-1)
	 * @param file
	 * @return String
	 */
	public static String getFilePath(String file) {
		Assert.assertNotEmpty(file, "file");
		String _file = filePathCvt(file);
		String path = ".";
		int index = _file.lastIndexOf(LINE_SPE);
		if (index > 0) {
			path = _file.substring(0, index + 1);
		}
		return path;
	}

	/**
	 * 根据文件全路径名称获取文件名
	 * @author lixl (2014-12-1)
	 * @param file
	 * @return String
	 */
	public static String getFileName(String file) {
		Assert.assertNotEmpty(file, "file");
		String _file = filePathCvt(file);
		int index = _file.lastIndexOf(LINE_SPE);
		if (index > 0) {
			return _file.substring(index + 1);
		} else {
			return _file;
		}
	}

	/**
	 * 根据文件全名获取文件对象
	 * @author lixl (2014-12-1)
	 * @param pathFile 文件全路径名称
	 * @return File
	 */
	public static File getFile(String pathFile) {
		Assert.assertNotEmpty(pathFile, "pathFile");
		return new File(pathFile);
	}

	/**
	 * 如果目录不存在创建目录
	 * @author lixl (2014-12-1)
	 * @param file
	 */
	public static void mkdir(File file) {
		Assert.assertNotEmpty(file, "file");
		String p = getFilePath(file.getPath());
		File f = getFile(p);
		if (!f.exists()) {
			f.mkdirs();
		}
	}

	/**
	 * 根据文件路径创建路径
	 * @author lixl (2014-12-19)
	 * @param path 路径路径
	 */
	public static void mkdir(String path) {
		mkdir(getFile(path + "/inner$$$.tmp"));
	}

	/**
	 * 根据文件名称创建文件
	 * @return File
	 */
	public static File createFile(String pathFile) {
		return createFile(getFile(pathFile));
	}

	/**
	 * @param file 创建文件
	 * @return File
	 */
	public static File createFile(File file) {
		Assert.assertNotEmpty(file, "file");
		mkdir(file);
		return FileUtil.createFile(file);
	}

	/**
	 * 写入文件
	 * @param image
	 * @param file
	 */
	public static void writeFileImage(byte[] image, File file) {
		FileUtil.writeFileImage(image, file);
	}

	/**
	 * 创建文件并写入文件
	 * @param image
	 * @param pathFile
	 */
	public static void writeFileImage(byte[] image, String pathFile) {
		File file = createFile(pathFile);
		writeFileImage(image, file);
	}

	/**
	 * 读取文件内容
	 * @author lixl (2014-12-9)
	 * @param file
	 * @return String
	 */
	public static String readFile(File file) {
		StringBuffer br = new StringBuffer();
		byte[] image = new byte[MAX_BF_LEN];
		int size = readFileImage(file, image);
		for (int i = 0; i < size; i++) {
			br.append(image[i]);
		}
		return br.toString();
	}

	/**
	 * 读取文件内容
	 * @author lixl (2014-12-9)
	 * @param file
	 * @return byte[]
	 */
	public static int readFileImage(File file, byte[] image) {
		return FileUtil.readFileImage(file, image);
	}

	/**
	 * 返回byte的数据大小对应的文本
	 * @param size
	 * @return
	 */
	public static String getFormatSize(long size) {
		DecimalFormat formater = new DecimalFormat("####.00");
		if (size < 1024) {
			return size + "bytes";
		} else if (size < 1024 * 1024) {
			float kbsize = size / 1024f;
			return formater.format(kbsize) + "KB";
		} else if (size < 1024 * 1024 * 1024) {
			float mbsize = size / 1024f / 1024f;
			return formater.format(mbsize) + "MB";
		} else if (size < 1024 * 1024 * 1024 * 1024) {
			float gbsize = size / 1024f / 1024f / 1024f;
			return formater.format(gbsize) + "GB";
		} else {
			return "size: error";
		}
	}

	
	/**
	 * 读取文件 Description:
	 * 
	 * @param file
	 * @param pos
	 * @param size
	 * @return
	 * @throws IOException 
	 */
	public static byte[] getFileToByte(File file, long pos, int size) throws IOException {

		byte[] by = new byte[size]; // 指定长度
		FileInputStream fis = new FileInputStream(file);
		BufferedInputStream bis = new BufferedInputStream(fis);

		bis.skip(pos); // 指定位置
		bis.read(by);

		bis.close();
		fis.close();

		return by;

	}

	/**
	 * 把文件流保存成物理文件
	 * 
	 * @param content
	 * @param outputFile
	 * @return
	 * @throws IOException
	 */
	public static void writeFileFromBytes(byte[] content, long pos, String outputFile) throws IOException {
		 // 打开一个随机访问文件流，按读写方式
        RandomAccessFile randomFile = new RandomAccessFile(outputFile, "rw");
        
        //将写文件指针移到文件尾。
        randomFile.seek(pos);
        randomFile.write(content);
        randomFile.close();
	}
	
	/**
	 * 把文件流保存成物理文件
	 * 
	 * @param content
	 * @param outputFile
	 * @return
	 * @throws IOException
	 */
	public static void writeFileFromBytes(byte[] content, long pos, String file_path, String file_name) throws IOException {
		
		File file = new File(file_path);//获取文件夹路径
		if(!file.exists()){//判断文件夹是否创建，没有创建则创建新文件夹
			file.mkdirs();
        }
        
		String outputFile = file_path + file_name;
		
		 // 打开一个随机访问文件流，按读写方式
        RandomAccessFile randomFile = new RandomAccessFile(outputFile, "rw");
        
        //将写文件指针移到文件尾。
        randomFile.seek(pos);
        randomFile.write(content);
        randomFile.close();
	}
}
