/**
 * Title: AddPublishTaskAction.java
 * File Description: 保存任务发布信息 同时生成发布和回退实例
 * @copyright: 2016
 * @company: CORSWORK
 * @author: zhangj
 * @version: 1.0
 * @date: 2016年11月19日
 */
package com.wk.cd.build.ea.action;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.wk.cd.build.ea.bean.AddPublishTaskInputBean;
import com.wk.cd.build.ea.bean.AddPublishTaskOutputBean;
import com.wk.cd.build.ea.bean.TargetPackageBean;
import com.wk.cd.build.ea.dao.EnvTaskDaoService;
import com.wk.cd.build.ea.dao.InstanceExeDaoService;
import com.wk.cd.build.ea.dao.UuFilelistDaoService;
import com.wk.cd.build.ea.info.EnvTaskInfo;
import com.wk.cd.build.ea.info.UuFilelistInfo;
import com.wk.cd.build.ea.service.EnvProgPublicService;
import com.wk.cd.build.ea.service.EnvTaskPublicService;
import com.wk.cd.build.ea.service.PublishTaskInstanceService;
import com.wk.cd.common.cm.service.GenNoService;
import com.wk.cd.common.util.Assert;
import com.wk.cd.common.util.FileTool;
import com.wk.cd.enu.TASK_STATUS;
import com.wk.cd.enu.TASK_TYPE;
import com.wk.cd.module1.entity.Instance;
import com.wk.cd.module1.entity.Program;
import com.wk.cd.module1.xml1.XmlReader;
import com.wk.cd.service.ActionBasic;
import com.wk.cd.system.lg.service.ActionLogPublicService;
import com.wk.lang.Inject;
import com.wk.logging.Log;
import com.wk.logging.LogFactory;
import com.wk.util.JaDateTime;

/**
 * Class Description:保存任务发布信息 同时生成发布和回退实例o
 * @author "Zhangj"
 */
public class AddPublishTaskAction
		extends ActionBasic<AddPublishTaskInputBean, AddPublishTaskOutputBean> {
	@Inject
	GenNoService genNoService;
	@Inject
	EnvTaskDaoService envTaskDaoService;
	@Inject
	EnvProgPublicService envProgPublicService;
	@Inject
	InstanceExeDaoService instanceExeDaoService;
	@Inject
	EnvTaskPublicService envTaskPublicService;
	@Inject
	PublishTaskInstanceService publishTaskInstanceService;
	@Inject
	UuFilelistDaoService uuFilelistDaoService;
	@Inject
	private ActionLogPublicService lgsvc;
	private static final Log logger = LogFactory.getLog();
	
	private static final String SUFFIX_ROLL = "rollback";

	/**
	 * Description:保存任务发布信息 同时生成发布和回退实例
	 * @param arg0
	 * @return
	 */
	@Override
	protected AddPublishTaskOutputBean doAction(AddPublishTaskInputBean input) {
		logger.debug("---------------AddPublishTaskAction_Begin------------------");
		AddPublishTaskOutputBean output = new AddPublishTaskOutputBean();
		// 非空校验
		Assert.assertNotEmpty(input.getEnv_name(),AddPublishTaskInputBean.ENV_NAMECN);
		Assert.assertNotEmpty(input.getTask_bk_desc(),AddPublishTaskInputBean.TASK_BK_DESCCN);
		Assert.assertNotEmpty(input.getProg_id(),AddPublishTaskInputBean.PROG_ID);
//		Assert.assertNotEmpty(input.getTarget_ver_num(),AddPublishTaskInputBean.TARGET_VER_NUMCN);
		logger.debug("环境名为[{}],发布版本号[{}],使用方案编号[{}]，执行发布生成实例",input.getEnv_name(), input.getTarget_ver_num(),input.getProg_id());
		
		String prog_id = input.getProg_id();
		String ver_num = input.getTarget_ver_num();
		List<TargetPackageBean> tar_package_list = input.getTar_package_list();
		envProgPublicService.checkProgIdIsNotExist(prog_id);
		
		// 判断是否有回退实例 插表
		String work_id = input.getWork_id();
		if(Assert.isEmpty(work_id)){
			work_id = genNoService.getWorkCode(input.getDtbs_bk_date());
		}else{
			// 如果传入过来有work_id表示是重新新建 则把之前插表的实例删除
			envTaskPublicService.checkTaskBeforeExe(work_id);
			EnvTaskInfo env_task_info = envTaskDaoService.getInfoByKey(work_id);
			String instance_id = env_task_info.getInstance_id();
			String rol_instance_id = env_task_info.getRol_work_id();
			instanceExeDaoService.deleteByInstanceId(instance_id);
			instanceExeDaoService.deleteByInstanceId(rol_instance_id);
			envTaskDaoService.deleteByKey(work_id);
		}
		//生成发布实例
		Instance pub_inst = publishTaskInstanceService.generateInstanceById(work_id,prog_id,ver_num);
		//插入实例执行信息表
		publishTaskInstanceService.insertInstanceExe(pub_inst);
		//初始化发布环境任务实例
		EnvTaskInfo env_task_info = envTaskInfoMerge(work_id, input, false, pub_inst.getInstance_id(), tar_package_list);
		envTaskDaoService.insertInfo(env_task_info);
		
		Program program = new Program(prog_id);
		program = XmlReader.read(program);
		// 有回退模板时
		if (!Assert.isEmpty(program.getRol_template_name())) {
			String rol_work_id = genNoService.getWorkCode(input.getDtbs_bk_date());
			env_task_info.setRol_work_id(rol_work_id);
			Instance rol_inst = publishTaskInstanceService.generateInstanceById(rol_work_id,prog_id+SUFFIX_ROLL,ver_num);
			publishTaskInstanceService.insertInstanceExe(rol_inst);
			// 初始化回退环境任务实例
			EnvTaskInfo rol_task_info = envTaskInfoMerge(rol_work_id, input, true, rol_inst.getInstance_id(), tar_package_list);
			envTaskDaoService.insertInfo(rol_task_info);
		}
		output.setWork_id(work_id);
		output.setExe_bk_no(1);
		logger.debug("---------------AddPublishTaskAction_End------------------");
		return output;
	}

	/**
	 * Description:
	 * @param arg0
	 * @return
	 */
	@Override
	protected String getLogTxt(AddPublishTaskInputBean input) {
		List<String> log_lst = new ArrayList<String>();
		log_lst.add("方案编号: " + input.getProg_id());
		return lgsvc.getLogTxt("保存任务发布信息", log_lst);
	}

	/**
	 * Description: 初始化环境任务数据（任务编号、环境名、项目编号、目标版本号、方案编号、创建日期、创建时间、创建用户、执行开始结束时间）
	 * @param work_id
	 * @param rol_flag 回退标志 true表示回退的
	 * @param input
	 */
	private EnvTaskInfo envTaskInfoMerge(String work_id,
			AddPublishTaskInputBean input, boolean rol_flag, String instance_id, List<TargetPackageBean> tar_package_list) {
		EnvTaskInfo info = new EnvTaskInfo();
		info.setWork_id(work_id);
		info.setEnv_name(input.getEnv_name());
		info.setProject_name(input.getProject_name());
		info.setTarget_ver_num(input.getTarget_ver_num());
		info.setProg_id(input.getProg_id());
		String pub_list_uuid = UUID.randomUUID().toString().replaceAll("-", "");
		info.setPub_list_uuid(pub_list_uuid);
		if(!Assert.isEmpty(tar_package_list)) {
			for (TargetPackageBean targetPackageBean : tar_package_list) {
				UuFilelistInfo file_info = new UuFilelistInfo();
				file_info.setList_uuid(pub_list_uuid);
				file_info.setFile_work_seq(genNoService.getWorkSeq(input.getDtbs_bk_date(), input.getRemote_ip(), input.getServer_port()));
				file_info.setFile_path(targetPackageBean.getDownload_path());
				file_info.setFile_name(targetPackageBean.getPackage_name());
				file_info.setPackage_name(targetPackageBean.getPackage_name());
				uuFilelistDaoService.insertInfo(file_info);
			}
		}
		info.setCrt_bk_date(input.getDtbs_bk_date());
		info.setTask_bk_desc(input.getTask_bk_desc());
		info.setCrt_bk_time(input.getDtbs_bk_time());
		info.setCrt_user_id(input.getOrg_user_id());
		info.setStart_bk_tm(JaDateTime.now());
		info.setEnd_bk_tm(JaDateTime.valueOf("1971-01-01 00:00:00"));
		info.setInstance_id(instance_id);
		if (rol_flag) {
			info.setTask_type(TASK_TYPE.PUBLISHROLL);
		} else {
			info.setTask_status(TASK_STATUS.RUNNING);
			info.setTask_type(TASK_TYPE.PUBLISH);
		}
		return info;

	}

}
