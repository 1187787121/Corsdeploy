/**

 * Title: InteTaskService.java
 * File Description: 集成任务服务类
 * @copyright: 2016
 * @company: CORSWORK
 * @author: Xul
 * @version: 1.0
 * @date: 2016年11月19日
 */
package com.wk.cd.build.ea.service;

import java.util.ArrayList;
import java.util.List;

import com.wk.cd.build.ea.bean.PhasePublishBean;
import com.wk.cd.build.ea.bean.SrvSocBean;
import com.wk.cd.build.ea.dao.EnvBuildTaskDaoService;
import com.wk.cd.build.ea.dao.EnvTaskDaoService;
import com.wk.cd.build.ea.dao.UuFilelistDaoService;
import com.wk.cd.build.ea.dao.UuSocDaoService;
import com.wk.cd.build.ea.info.EnvTaskInfo;
import com.wk.cd.build.ea.info.PgInteStepInfo;
import com.wk.cd.build.ea.info.UuFilelistInfo;
import com.wk.cd.build.ea.info.UuParamInfo;
import com.wk.cd.build.ea.info.UuSocInfo;
import com.wk.cd.enu.STEP_TYPE;
import com.wk.cd.common.util.Assert;
import com.wk.cd.enu.YN_FLAG;
import com.wk.cd.enu.IMPL_TYPE;
import com.wk.cd.module.Process;
import com.wk.cd.module.Result;
import com.wk.cd.module.info.InstanceInfo;
import com.wk.cd.module.info.ModuleInfo;
import com.wk.cd.module.info.TemplateInfo;
import com.wk.cd.module.service.TextLogInterceptor;
import com.wk.cd.module.xml.XmlReader;
import com.wk.cd.module.xml.XmlWriter;
import com.wk.cd.system.dt.service.DtSocService;
import com.wk.lang.Inject;
import com.wk.logging.Log;
import com.wk.logging.LogFactory;

/**
 * Class Description: 集成任务服务类
 * @author Xul
 */
public class InteTaskService {
	
	@Inject private EnvTaskDaoService taskSrv;
	@Inject private EnvTaskPublicService taskPubSrv;
	@Inject private EnvBuildTaskDaoService envBuildSrv;
	@Inject private UuFilelistDaoService uuFileSrv;
	@Inject private UuSocDaoService uuSocDaoService;
	@Inject private DtSocService dtSocSrv;
	@Inject private PublishTaskService publistTaskService;
	private static final Log logger = LogFactory.getLog();
	
	public static final String TARGET_DIR = "target";
	public static final String SRC_CODE_DIR = "source";
	
	/**
	 * Description: 按步骤执行任务
	 * @param work_id 任务编号
	 * @param step_id 步骤编号
	 * @param proc process
	 * @param skip_flag 是否跳过标志
	 * @return
	 */
	public Result executeTaskByStep(String work_id, int step_id, Process proc, boolean skip_flag){
		Result result = null;
		//若为执行跳过
		if(skip_flag){
			// 执行跳过（从0开始）
			logger.plog("执行跳过");
			result = proc.skip(step_id - 1);
		}else{
			// 执行步骤并获取返回结果
			logger.plog("开始执行");
			// 执行步骤（从0开始）
			result = proc.run(step_id - 1);
			logger.plog("执行结束");
		}
		return result;
	}
	
	/**
	 * Description: 添加任务执行日志(只在第一步存表)
	 * @param work_id 任务编号
	 * @param step_id 步骤编号
	 * @param proc process
	 * @param all_steps 总步骤数
	 */
	public void addExeLog(String work_id, int step_id, Process proc, int all_steps){
		// 获取环境任务根路径
		String task_root_path = taskPubSrv.generateTaskRootPath(work_id);
		// 生成日志文件名（日志名称规则：LOG + WORK_ID(任务编号).txt）
		String file_name = "LOG" + work_id + ".txt";
		// 打印日志
		logger.info("打印日志" + task_root_path + file_name);
		proc.addInterceptor(new TextLogInterceptor(task_root_path + file_name, all_steps, "集成任务："+ work_id));
		// 新增任务表日志信息
		if(step_id == 1){
			taskSrv.updateExecuteLog(task_root_path + file_name, work_id);
		}
	}
	
	/**
	 * Description: 添加任务执行日志(只在第一阶段存表)
	 * @param work_id 任务编号
	 * @param step_id 步骤编号
	 * @param proc process
	 * @param all_steps 总步骤数
	 */
	public void addBuildExeLog(String work_id, int step_id, Process proc, int all_steps, String inst_id){
		// 获取环境任务根路径
		String task_root_path = taskPubSrv.generateTaskRootPath(work_id);
		// 生成日志文件名（日志名称规则：inst_id(实例ID)+_log.txt）
		String file_name = inst_id + "_log.txt";
		// 打印日志
		logger.info("打印日志" + task_root_path + file_name);
		proc.addInterceptor(new TextLogInterceptor(task_root_path + file_name, all_steps, "构建应用部署："+ work_id));
		// 新增任务表日志信息
		if(step_id == 1){
			envBuildSrv.updateExecuteLog(task_root_path + file_name, work_id);
		}
	}
	
	/**
	 * Description: 根据任务编号获取实例ID,并从xml文件里读取模板实例
	 * @param work_id 任务编号
	 * @return
	 */
	public InstanceInfo readInstanceByXml(String work_id){
		logger.debug("从XML读取实例, 任务ID:[{}]", work_id);
		EnvTaskInfo info = taskSrv.getInfoByKey(work_id);
		String inst_id = info.getInstance_id();
		Assert.assertNotEmpty(inst_id, "实例ID");
		return XmlReader.readInstance(inst_id);
	}
	
	/**
	 * Description: 将实例存成xml保存到本地
	 * @param step_list 步骤信息列表
	 * @param env_name 环境名
	 * @param code_ver_num 集成源码版本号
	 * @return 实例ID
	 */
	public String saveInstance2Xml(List<PgInteStepInfo> step_list, String env_name, String code_ver_num){
		InstanceInfo inst = getInstance(step_list, env_name, code_ver_num);
		String inst_id = inst.getInstanceId();
		XmlWriter.writerInstance(inst);
		return inst_id;
	}
	
	
	/**
	 * Description: 生成实例
	 * @param step_list 步骤信息列表
	 * @param env_name 环境名
	 * @param code_ver_num 集成源码版本号
	 * @return
	 */
	private InstanceInfo getInstance(List<PgInteStepInfo> step_list, String env_name, String code_ver_num){
		//获取模板
		TemplateInfo template = generateTp(step_list);
		//获取参数列表
		List<UuParamInfo> param_list = generateParams(env_name, code_ver_num);
		//获取阶段数据源信息
		List<PhasePublishBean> phase_list = generatePhaseList(step_list, param_list);
		InstanceInfo inst = publistTaskService.generateInteInstance(template, param_list, phase_list, null);
		return inst;
	}
	
	/**
	 * Description: 生成阶段数据源信息
	 * @param step_list 步骤信息列表
	 * @param param_list 参数列表
	 * @return
	 */
	private List<PhasePublishBean> generatePhaseList(List<PgInteStepInfo> step_list, List<UuParamInfo> param_list){
		Assert.assertNotEmpty(step_list, "方案步骤信息");
		List<PhasePublishBean> phase_list = new ArrayList<PhasePublishBean>();
		if(!Assert.isEmpty(step_list)){
			for(PgInteStepInfo info : step_list){
				PhasePublishBean bean = generatePhaseByType(param_list, info);
				phase_list.add(bean);
			}
		}
		return phase_list;
	}
	
	/**
	 * Description: 生成参数列表
	 * @param env_name 环境名
	 * @param code_ver_num 集成源码版本号
	 * @return
	 */
	private List<UuParamInfo> generateParams(String env_name, String code_ver_num){
		//获取参数列表
		List<UuParamInfo> param_list = new ArrayList<UuParamInfo>();
		//将环境名设为参数
		UuParamInfo param_info = new UuParamInfo();
		param_info.setParam_name("env_name");
		param_info.setParam_value(env_name);
		param_list.add(param_info);
		//将集成源码版本号设为参数
		UuParamInfo param_info2 = new UuParamInfo();
		param_info2.setParam_name("ver_num");
		param_info2.setParam_value(code_ver_num);
		param_list.add(param_info2);
		return param_list;
	}
	
	/**
	 * Description: 生成模板
	 * @param step_list 步骤信息列表
	 * @return
	 */
	private TemplateInfo generateTp(List<PgInteStepInfo> step_list){
		Assert.assertNotEmpty(step_list, "方案步骤信息");
		TemplateInfo tp_info = new TemplateInfo();
		for(PgInteStepInfo info : step_list){
			ModuleInfo mod_info = generateModuleByType(info);
//			tp_info.addModule(mod_info);
			tp_info.addSub_moduleInfo(mod_info);
		}
		return tp_info;
	}
	
	/**
	 * Description: 根据步骤类型生成阶段数据源信息
	 * @param env 阶段数据源信息
	 * @param info 集成方案步骤INFO
	 * @return
	 */
	private PhasePublishBean generatePhaseByType(List<UuParamInfo> param_list, PgInteStepInfo info){
		PhasePublishBean bean = new PhasePublishBean();
		bean.setGen_flag(YN_FLAG.YES);
		SrvSocBean soc_bean = new SrvSocBean();
		//获取步骤类型
		STEP_TYPE type = info.getStep_type();
		String soc_uuid = info.getSoc_uuid();
		List<UuSocInfo> soc_list = uuSocDaoService.queryListInfoByUU(soc_uuid);
		Assert.assertNotEmpty(soc_list, "数据源信息");
		if(STEP_TYPE.VERSION.equals(type)){
			bean.setImpl_type(IMPL_TYPE.SVN);
			String ver_soc_name = soc_list.get(0).getVer_soc_name();
			String exe_soc_name = soc_list.get(0).getExe_soc_name();
			soc_bean.setVer_soc_name(ver_soc_name);
			soc_bean.setExe_soc_name(exe_soc_name);
			//将源码版本目录设为参数
			UuParamInfo param_info = new UuParamInfo();
			param_info.setParam_name("version_path");
			param_info.setParam_value(soc_list.get(0).getCode_bk_dir());
			param_list.add(param_info);
		}else if(STEP_TYPE.COMPILE.equals(type)){
			bean.setImpl_type(IMPL_TYPE.SHELL);
			String exe_soc_name = soc_list.get(0).getExe_soc_name();
			soc_bean.setExe_soc_name(exe_soc_name);
		}else if(STEP_TYPE.STORAGE.equals(type)){
			bean.setImpl_type(IMPL_TYPE.SVN);
			String ver_soc_name = soc_list.get(0).getVer_soc_name();
			String exe_soc_name = soc_list.get(0).getExe_soc_name();
			soc_bean.setVer_soc_name(ver_soc_name);
			soc_bean.setExe_soc_name(exe_soc_name);
			//将目标版本目录设为参数
			UuParamInfo param_info = new UuParamInfo();
			param_info.setParam_name("storage_path");
			param_info.setParam_value(soc_list.get(0).getCode_bk_dir());
			param_list.add(param_info);
		}else{
			bean.setImpl_type(IMPL_TYPE.SHELL);
			String exe_soc_name = soc_list.get(0).getExe_soc_name();
			soc_bean.setExe_soc_name(exe_soc_name);
		}
		bean.setSrv_soc(new SrvSocBean[]{soc_bean});
		return bean;
	}
	
	/**
	 * Description: 根据步骤类型生成不同组件
	 * @param info 集成方案步骤INFO
	 * @return
	 */
	private ModuleInfo generateModuleByType(PgInteStepInfo info){
		// 非空校验
		STEP_TYPE type = info.getStep_type();
		Assert.assertNotEmpty(type, "步骤类型");
		String desc = info.getStep_expl();
		Assert.assertNotEmpty(desc, "步骤说明");
		// 根据步骤类型，获取不同的组件
		if(STEP_TYPE.VERSION.equals(type)){
			return generateVersionModule(desc);
		}else if(STEP_TYPE.COMPILE.equals(type)){
			return generateCompileModule(info);
		}else if(STEP_TYPE.STORAGE.equals(type)){
			return generateStorageModule(info, desc, info.getStorage_list_uuid());
		}else{
			return generateScriptModule(desc, info.getStep_bk_script());
		}
	}
	
	/**
	 * Description: 生成版本组件
	 * @param step_desc 步骤说明
	 * @return
	 */
	private ModuleInfo generateVersionModule(String step_desc){
		ModuleInfo info = new ModuleInfo();
		info.setCn_name(step_desc);
		
		/**
		 * 定义任务根目录
		 */
		String root_path = "${env_name}/" + SRC_CODE_DIR;
		
		/**
		 * 生成命令
		 */
		//第一步：校验环境任务根目录是否存在，若存在，则删除该目录
		String s1 = "if [ -d ./" + root_path + " ];then rm -rf ./" + root_path + ";fi";
		
		//第二步：从版本机检出源码到集成环境
		String s2 = "co ${version_path}/${ver_num} " + root_path + "/${ver_num}";
		
		info.setCmds(new String[]{s1, s2});
		info.setImpl_type(IMPL_TYPE.SVN);
		return info;
	}
	
	/**
	 * Description: 生成脚本组件
	 * @param step_desc 步骤说明
	 * @param script 脚本
	 * @return
	 */
	private ModuleInfo generateScriptModule(String step_desc, String script){
		Assert.assertNotEmpty(script, "脚本");
		ModuleInfo info = new ModuleInfo();
		info.setCn_name(step_desc);
		info.setCmds(script.split("\r\n"));
		info.setImpl_type(IMPL_TYPE.SHELL);
		return info;
	}
	
	/**
	 * Description: 生成编译组件
	 * @param step_info 集成方案步骤INFO
	 * @return
	 */
	private ModuleInfo generateCompileModule(PgInteStepInfo step_info){
		Assert.assertNotEmpty(step_info.getCompile_type(), "编译类型");
		Assert.assertNotEmpty(step_info.getComplie_bk_path(), "编译路径");
		ModuleInfo info = new ModuleInfo();
		info.setCn_name(step_info.getStep_expl());
		//生成规则:环境变量（按行拆分）+ 切换到编译路径下 + 编译类型（如ant）+ 空格 + 编译参数（如jar）
//		if(COMPILE_TYPE.ANT.equals(type)){
			/**
			 * 生成命令
			 */
			//第一步：校验编译路径是否存在
			String s1 = "test -d " + step_info.getComplie_bk_path();
			
			//第二步：执行环境变量
//			String s2 = step_info.getEnv_variable();
			
			//第三步：切换到编译路径下
			String s3 = "cd " + step_info.getComplie_bk_path();
			
			//第四步：执行编译命令
			String s4 = step_info.getCompile_type().getCname() + " " + step_info.getCompile_param();
			
//			String[] cmds = (s1 + "\r\n" + s2 + "\r\n" + s3 + "\r\n" + s4).split("\r\n");
			String[] cmds = (s1 + "\r\n" + s3 + "\r\n" + s4).split("\r\n");
//		}
		info.setCmds(cmds);
		info.setImpl_type(IMPL_TYPE.SHELL);
		return info;
	}
	
	/**
	 * Description: 生成入库组件
	 * @param step_desc 步骤说明
	 * @param list_uuid 入库清单UUID
	 * @return
	 */
	private ModuleInfo generateStorageModule(PgInteStepInfo step_info, String step_desc, String list_uuid){
		Assert.assertNotEmpty(list_uuid, "入库清单UUID");
		List<String> pac_list = uuFileSrv.queryPacList(list_uuid);
		Assert.assertNotEmpty(pac_list, "入库包名列表");
		
		/**
		 * 定义存放源码的目录
		 */
		String srcpath = step_info.getStorage_bk_path();
		
		/**
		 * 定义存放目标的目录
		 */
		String tagpath = "${env_name}/" + TARGET_DIR + "/${ver_num}";
		
		/**
		 * 生成命令
		 */
		//第一步：校验源码目录是否存在
		String s1 = "test -d " + srcpath;
		
		//第二步：切换到源码目录下
		String s2 = "cd " + srcpath;
		
		//第三步：生成打包命令(一或多个)
		String s3 = "";
		for(String pac : pac_list){
			//根据包名获取清单列表
			String pac_type = pac.substring(pac.lastIndexOf(".")+1);
			List<UuFilelistInfo> file_list = uuFileSrv.queryFileByPac(list_uuid, pac);
			//获取包相对路径
			String relative_path = file_list.get(0).getTarget_relative_path();
			if(!relative_path.endsWith("/")){
				relative_path = relative_path + "/";
			}
			String cmd = "test -d " + relative_path + " || mkdir -p " + relative_path + " \r\n ";
			//根据打包类型生成不同命令：目前支持tar、zip
			if("tar".equals(pac_type)){
				cmd += "tar -cf " + relative_path + pac;
			}else if("zip".equals(pac_type)){
				cmd += "zip -r " + relative_path + pac;
			}else{
				cmd += "tar -cf " + relative_path + pac;
			}
			if(!Assert.isEmpty(file_list)){
				for(UuFilelistInfo file_info : file_list){
					String full_path = file_info.getFile_path() + file_info.getFile_name();
					cmd += " " + full_path;
				}
			}
			s3 += cmd + "\r\n";
		}
		//替换掉命令最后的\r\n
		s3 = s3.substring(0, s3.lastIndexOf("\r\n"));
		
		//第四步：检出版本到本地目标目录下
		String s4 = "co ${storage_path}/${ver_num} " + tagpath;
		
		//第五步：切换至根目录下
		String s5 = "cd";
		
		//第六步：将目标包移动到目标目录下(一或多步)
		String s6 = "";
		for(String pac : pac_list){
			String relative_path = getPacRelativePath(list_uuid, pac);
			String cmd1 = "test -d ./" + tagpath + relative_path  + " || mkdir ./" + tagpath + relative_path;
			String cmd2 = "mv " + srcpath + relative_path + pac + " ./" + tagpath + relative_path + pac;
			s6 += cmd1 + "\r\n" + cmd2 + "\r\n";
		}
		//替换掉命令最后的\r\n
		s6 = s6.substring(0, s6.lastIndexOf("\r\n"));
		
		//第七步：切换至目标目录下
		String s7 = "cd ./" + tagpath;
		
		//第八步：SVN添加目标包
		String s8 = "add * --force";
		
		//第九步：提交SVN
		String s9 = "ci -m " + "commit";
		
		ModuleInfo info = new ModuleInfo();
		info.setCn_name(step_desc);
		info.setCmds(new String[]{s1, s2, s3, s4, s5, s6, s7, s8, s9});
		info.setImpl_type(IMPL_TYPE.SVN);
		return info;
	}
	
	/**
	 * Description: 根据包名获取相对路径
	 * @param list_uuid
	 * @param pac_name
	 * @return
	 */
	public String getPacRelativePath(String list_uuid,String pac_name){
		//根据包名获取清单列表
		List<UuFilelistInfo> file_list = uuFileSrv.queryFileByPac(list_uuid, pac_name);
		//获取包相对路径
		String relative_path = file_list.get(0).getTarget_relative_path();
		if(!relative_path.endsWith("/")){
			relative_path = relative_path + "/";
		}
		if(relative_path.startsWith(".")){
			relative_path = relative_path.substring(1, relative_path.length());
		}
		return relative_path;
	}
}
