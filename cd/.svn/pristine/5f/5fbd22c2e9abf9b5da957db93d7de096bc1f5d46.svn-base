/**
 * Title: ExeStepBuildDeployAction.java
 * File Description: 单步执行构建应用部署
 * @copyright: 2016
 * @company: CORSWORK
 * @author: Xul
 * @version: 1.0
 * @date: 2016年12月12日
 */
package com.wk.cd.build.ea.action;

import java.util.ArrayList;
import java.util.List;

import com.wk.cd.build.ea.bean.ExeStepBuildDeployInputBean;
import com.wk.cd.build.ea.bean.ExeStepBuildDeployOutputBean;
import com.wk.cd.build.ea.dao.EnvBuildTaskDaoService;
import com.wk.cd.build.ea.dao.EnvTaskDaoService;
import com.wk.cd.build.ea.dao.InstanceExeDaoService;
import com.wk.cd.build.ea.service.EnvTaskPublicService;
import com.wk.cd.build.ea.service.InteTaskInstanceService;
import com.wk.cd.build.ea.service.InteTaskService;
import com.wk.cd.enu.EXE_METHOD;
import com.wk.cd.enu.EXE_RESULT;
import com.wk.cd.enu.EXE_STATUS;
import com.wk.cd.enu.TASK_STATUS;
import com.wk.cd.common.cm.dao.CmSeqDaoService;
import com.wk.cd.common.util.Assert;
import com.wk.cd.enu.CMD_STATUS;
import com.wk.cd.module1.Process;
import com.wk.cd.module1.ProcessManager;
import com.wk.cd.module1.Result;
import com.wk.cd.module.info.InstanceInfo;
import com.wk.cd.module1.entity.Instance;
import com.wk.cd.service.ActionBasic;
import com.wk.cd.system.lg.service.ActionLogPublicService;
import com.wk.lang.Inject;
import com.wk.logging.Log;
import com.wk.logging.LogFactory;
import com.wk.util.JaDateTime;

/**
 * Class Description: 单步执行构建应用部署
 * @author Xul
 */
public class ExeStepBuildDeployAction extends ActionBasic<ExeStepBuildDeployInputBean, ExeStepBuildDeployOutputBean>{
	
	@Inject private EnvTaskPublicService taskPubSrv;
	@Inject private InteTaskService inteTaskSrv;
	@Inject private InstanceExeDaoService instanceExeDaoService;
	@Inject private EnvTaskDaoService taskSrv;
	@Inject private EnvBuildTaskDaoService envBuildSrv;
	@Inject private InteTaskInstanceService inteTaskInstanceService;
	@Inject private CmSeqDaoService cmsvc;
	@Inject private ActionLogPublicService lgsvc;
	private static final Log logger = LogFactory.getLog();
	
	/** 
	 * Description: 单步执行构建应用部署
	 * @param input
	 * @return 
	 */
	@Override
	protected ExeStepBuildDeployOutputBean doAction(ExeStepBuildDeployInputBean input) {
		logger.debug("-----------ExeStepBuildDeployAction Begin------------");
		ExeStepBuildDeployOutputBean output = new ExeStepBuildDeployOutputBean();
		
		/**
		 * -----------------------------执行前准备-----------------------------
		 */
		// 非空校验
		String work_id = input.getWork_id();
		int tpl_phase_id = input.getPhase_id();
		boolean skip_flag = input.isSkip_flag();
		Assert.assertNotEmpty(work_id, ExeStepBuildDeployInputBean.WORK_IDCN);
		Assert.assertNotEmpty(tpl_phase_id == 0 ? null : tpl_phase_id, ExeStepBuildDeployInputBean.PHASE_IDCN);
		// 执行前校验
		taskPubSrv.checkTaskBeforeExe(work_id);
		// 插入执行动作
		taskSrv.updateExeMethodById(EXE_METHOD.STEP, work_id);
		// 从XML读取实例
		Instance inst = inteTaskInstanceService.readInstanceByWorkId(work_id);
		Process proc = ProcessManager.instance.buildProcess(inst);
		// 获取总阶段骤数(实例)
		int all_phases = inst.getPhaseCount();
		// 获取总阶段骤数(模板)
		int all_phases2 = instanceExeDaoService.getMaxTplPhase(inst.getInstance_id());
		// 添加任务执行日志
		inteTaskInstanceService.addBuildExeLog(work_id, tpl_phase_id, proc, all_phases, inst.getInstance_id());
//		inteTaskSrv.addBuildExeLog(work_id, tpl_phase_id, proc, all_phases, inst.getInstance_id());
		// 根据模板阶段号查询实例阶段号列表
		List<Integer> phase_list = instanceExeDaoService.queryInstPhaseByTplPhase(inst.getInstance_id(), tpl_phase_id);
		// 初始化执行结果标志
		boolean exe_flag = true;
		// 遍历实例阶段列表
		if(!Assert.isEmpty(phase_list)){
			for(Integer phase_id : phase_list){
				// 修改执行开始时间并修改执行状态为执行中
				instanceExeDaoService.updateExecuteStartTime(JaDateTime.now(), inst.getInstance_id(), phase_id);
				instanceExeDaoService.updateExecuteStatus(EXE_STATUS.RUNNING, inst.getInstance_id(), phase_id);
				
				// 将执行前的sql提交
				cmsvc.getSession().commitAndResume();
				
				/**
				 * -----------------------------执行主程序-----------------------------
				 */
				// 按阶段执行任务
				Result result = inteTaskInstanceService.executeTaskByStep(work_id, phase_id, proc, skip_flag);
//				Result result = inteTaskSrv.executeTaskByStep(work_id, phase_id, proc, skip_flag);
				String msg = result.getMsg();
				// 若执行信息长度大于450，则截取多余部分
				logger.debug("任务：[{}], 模板第[{}]阶段执行日志：[{}]", work_id, tpl_phase_id, msg);
				logger.debug("任务：[{}], 实例第[{}]阶段执行日志：[{}]", work_id, phase_id, msg);
				if(msg.length() >= 450){
					msg = msg.substring(0, 450);
				}
				logger.info("执行结束后修改信息");
				
				// 修改执行状态为已执行（根据执行结果分别为成功，失败，跳过）
				instanceExeDaoService.updateExecuteStatus(EXE_STATUS.EXECUTED, inst.getInstance_id(), phase_id);
				if(CMD_STATUS.SUCCEED.equals(result.getStatus())){
					logger.debug("执行任务编号[{}], 第[{}]阶段成功", work_id, phase_id);
					instanceExeDaoService.updateExecuteEnd(msg, EXE_RESULT.SUCCESS, JaDateTime.now(), 0, inst.getInstance_id(), phase_id);
				}else if(CMD_STATUS.ERROR.equals(result.getStatus())){
					logger.debug("执行任务编号[{}], 第[{}]阶段失败", work_id, phase_id);
					instanceExeDaoService.updateExecuteEnd(msg, EXE_RESULT.FAIL, JaDateTime.now(), 0, inst.getInstance_id(), phase_id);
					exe_flag = false;
					break;
				}else if(CMD_STATUS.SKIP.equals(result.getStatus())){
					logger.debug("执行任务编号[{}], 第[{}]阶段跳过", work_id, phase_id);
					instanceExeDaoService.updateExecuteStatus(EXE_STATUS.SKIP, inst.getInstance_id(), phase_id);
					instanceExeDaoService.updateExecuteEnd(msg, null, JaDateTime.now(), 0, inst.getInstance_id(), phase_id);
				}
				// 将执行结果提交
				cmsvc.getSession().commitAndResume();
			}
		}
		
		//返回下一阶段号，并根据执行结果判断任务执行状态
		if(!exe_flag){
			envBuildSrv.updateTaskStatus(TASK_STATUS.EXECUTED, work_id);
			envBuildSrv.updateExecuteEndTime(JaDateTime.now(), EXE_RESULT.FAIL, work_id);
			output.setNext_step(-1);
		}else if(all_phases2 == tpl_phase_id ){
			envBuildSrv.updateTaskStatus(TASK_STATUS.EXECUTED, work_id);
			envBuildSrv.updateExecuteEndTime(JaDateTime.now(), EXE_RESULT.SUCCESS, work_id);
			output.setNext_step(tpl_phase_id);
		}else{
			output.setNext_step(tpl_phase_id + 1);
		}
		
		
		logger.debug("-----------ExeStepBuildDeployAction End------------");
		return output;
	}

	/** 
	 * Description: 单步执行构建应用部署
	 * @param input
	 * @return 
	 */
	@Override
	protected String getLogTxt(ExeStepBuildDeployInputBean input) {
		List<String> log_lst = new ArrayList<String>();
		log_lst.add("任务编号: " + input.getWork_id());
		return lgsvc.getLogTxt("单步执行构建应用部署", log_lst);
	}

}
