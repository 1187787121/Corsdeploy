package com.wk.cd.module.action;

import java.util.ArrayList;
import java.util.List;

import com.wk.cd.common.cm.service.GenNoService;
import com.wk.cd.common.util.Assert;
import com.wk.cd.enu.MODULE_TYPE;
import com.wk.cd.enu.PUBLISH_STATE;
import com.wk.cd.enu.TEMPLATE_FORMATE;
import com.wk.cd.module.bean.AddTemplateInputBean;
import com.wk.cd.module.bean.AddTemplateOutputBean;
import com.wk.cd.module.dao.MoTemplateDaoService;
import com.wk.cd.module.info.MoTemplateInfo;
import com.wk.cd.module.info.TemplateInfo;
import com.wk.cd.module.service.ModuleCommonService;
import com.wk.cd.module.service.TemplateService;
import com.wk.cd.module.xml.XmlPathUtil;
import com.wk.cd.module.xml.XmlWriter;
import com.wk.cd.service.ActionBasic;
import com.wk.cd.system.lg.service.ActionLogPublicService;
import com.wk.lang.Inject;
import com.wk.logging.Log;
import com.wk.logging.LogFactory;

public class AddTemplateAction extends
		ActionBasic<AddTemplateInputBean, AddTemplateOutputBean> {

	@Inject
	private ActionLogPublicService lgsvc;

	@Inject
	private TemplateService templateService;

	@Inject
	private MoTemplateDaoService moTemplateDaoService;

	@Inject
	private ModuleCommonService modulePublicService;

	@Inject
	private GenNoService genNoSrv;
	private static final Log logger = LogFactory.getLog();

	protected AddTemplateOutputBean doAction(AddTemplateInputBean input) {
		logger.info("-----AddTemplateAction Begin-----");
		AddTemplateOutputBean output = new AddTemplateOutputBean();
		TemplateInfo template = input.getTemplate();

		Assert.assertNotEmpty(template, "模版信息");
		Assert.assertNotEmpty(template.getCn_name(), "模板名");
		Assert.assertNotEmpty(template.getBk_desc(), "模板描述");
		Assert.assertNotEmpty(template.getTemplate_type(), "模板类型");
		Assert.assertNotEmpty(template.getOperating_system(), "操作系统");
		Assert.assertNotEmpty(template.getModules(), "模版配置信息");

		this.templateService.checkTemplateNameIsRight(template.getCn_name());

		this.templateService.checkTemplateNameIsNotExist(template.getCn_name());

		template.setId(this.genNoSrv.getCompCode(input.getDtbs_bk_date()));

		logger.info("开始生成模版配置文件：["
				+ XmlPathUtil.getPathByCompId(template.getId(),
						MODULE_TYPE.TEMPLATE) + "]");
		XmlWriter.writerTemplate(template, template.getId());

		MoTemplateInfo tpTemplateInfo = new MoTemplateInfo();
		tpTemplateInfo.setTemplate_name(template.getCn_name());
		tpTemplateInfo.setTemplate_bk_desc(template.getBk_desc());
		tpTemplateInfo.setTemplate_type(template.getTemplate_type());
		tpTemplateInfo.setOperating_system(this.modulePublicService
				.generateIntString(template.getOperating_system()));
		tpTemplateInfo.setRef_module_id(template.getId());
		tpTemplateInfo.setScript_file_path(XmlPathUtil.getPathByCompId(
				template.getId(), MODULE_TYPE.TEMPLATE));
		tpTemplateInfo.setCrt_bk_date(input.getDtbs_bk_date());
		tpTemplateInfo.setCrt_bk_time(input.getDtbs_bk_time());
		tpTemplateInfo.setCrt_user_id(input.getOrg_user_id());
		tpTemplateInfo.setTemplate_formate(TEMPLATE_FORMATE.XML);
		tpTemplateInfo.setPublish_state(PUBLISH_STATE.YES);
		logger.info("开始插入投产模板表,TEMPLATE_NAME：[" + template.getCn_name() + "]");
		this.moTemplateDaoService.insertInfo(tpTemplateInfo);

		this.modulePublicService.saveCompQuoteMsg(template.getModules(),
				template.getId(), MODULE_TYPE.TEMPLATE);
		logger.info("-----AddTemplateAction End-----");
		return output;
	}

	protected String getLogTxt(AddTemplateInputBean input) {
		List<String> log_lst = new ArrayList<String>();

		return this.lgsvc.getLogTxt("新增流程模板", log_lst);
	}
}