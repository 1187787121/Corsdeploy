package com.wk.cd.module;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.wk.cd.module.exc.CmdParamIsNotExistException;
import com.wk.cd.module.info.Param;
import com.wk.logging.Log;
import com.wk.logging.LogFactory;

public final class ParamUtil {
	private static final Log logger = LogFactory.getLog();
	
	public static String[] resolveParam(String[] cmds, Env env) {
		return resolveParam(-1, cmds, env);
	}

	public static String[] resolveParam(int stage, String[] cmds, Env env) {
		List<String> codes = new ArrayList<String>();
		for (String cmd : cmds) {
			logger.debug("current need replace cmd [{}]",cmd);
			List<String> param_names = getParamInCode(cmd);
			logger.debug("current cmd contains all params name[{}]",param_names);
			if (param_names.size() > 0) {
				List<Param> params = getParamsByNames(stage, param_names, env);
				List<Map<String, String>> param_values = descartes(params);
				for (Map<String, String> values : param_values)
					codes.add(replaceCmd(cmd, values));
			} else {
				codes.add(cmd);
			}
		}
		return codes.toArray(new String[codes.size()]);
	}

	/**
     * Description: 替换具体命令
     * @param cmd
     * @param param_values
     * @return
     */
	public static String replaceCmd(String cmd, Map<String, String> param_values) {
		String cmd_temp = cmd;
		for (Map.Entry<String, String> entry : param_values.entrySet()) {
			String var = entry.getKey();
			String match = "\\$\\{\\s*" + var + "\\s*\\}";
			Pattern var_regex = Pattern.compile(match);
			Matcher m = var_regex.matcher(cmd_temp);
			if (m.find()) {
				cmd_temp = m.replaceAll(entry.getValue());
			}
		}
		return cmd_temp;
	}

	 /**
     * Description: 将参数对 进行笛卡尔乘积
     * @param params
     * @return
     */
	public static List<Map<String, String>> descartes(List<Param> params) {
		List<Map<String, String>> results = new ArrayList<Map<String, String>>();

		//先处理分组参数
		Set<String> groups = findGroups(params);
		for (String group : groups) {
			results = descartesOne(results,
					toGroupListMap(findGroupParams(group, params)));
		}

		 // 生成笛卡尔积的每组数据
		for (int i = 0; i < params.size(); ++i) {
			Param p = params.get(i);
			if (p.hasGroup()) {
				continue;
			}
			results = descartesOne(results, params.get(i));
		}
		return results;
	}

	public static List<Map<String, String>> descartesOne(
			List<Map<String, String>> a, Param b) {
		return descartesOne(a, toListMap(b.getName(), b.getListValue()));
	}

	private static Set<String> findGroups(List<Param> params) {
		Set<String> names = new HashSet<String>();
		for (int i = 0; i < params.size(); ++i) {
			Param p = params.get(i);
			if (p.hasGroup()) {
				names.add(p.getInfo().getParam_group());
			}
		}
		return names;
	}

	private static List<Param> findGroupParams(String group, List<Param> params) {
		List<Param> gps = new ArrayList<Param>();
		for (int i = 0; i < params.size(); ++i) {
			Param p = params.get(i);
			if (group.equals(p.getInfo().getParam_group())) {
				gps.add(p);
			}
		}
		return gps;
	}

	private static List<Map<String, String>> toGroupListMap(List<Param> params) {
		checkGroupParamLength(params);

		int length = params.get(0).size();

		List<Map<String, String>> results = new ArrayList<Map<String, String>>();
		for (int i = 0; i < length; ++i) {
			Map<String, String> m = new HashMap<String, String>();
			for (int j = 0; j < params.size(); ++j) {
				Param p = params.get(j);
				m.put(p.getName(), p.getListValue()[i]);
			}
			results.add(m);
		}
		return results;
	}

	private static List<Map<String, String>> toListMap(String name, String[] lv) {
		List<Map<String, String>> results = new ArrayList<Map<String, String>>();
		for (int i = 0; i < lv.length; ++i) {
			Map<String, String> m = new HashMap<String, String>();
			m.put(name, lv[i]);
			results.add(m);
		}
		return results;
	}

	public static List<Map<String, String>> descartesOne(
			List<Map<String, String>> a, List<Map<String, String>> b) {
		if ((a == null) || (a.size() <= 0)) {
			return b;
		}

		List<Map<String, String>> results = new ArrayList<Map<String, String>>();
		for (int i = 0; i < a.size(); ++i) {
			Map<String, String> row = a.get(i);
			for (int j = 0; j < b.size(); ++j) {
				Map<String, String> m = b.get(j);
				Map<String, String> rownew = new HashMap<String, String>();
				rownew.putAll(row);
				rownew.putAll(m);
				results.add(rownew);
			}
		}
		return results;
	}

	 /**
     * TODO: 分组参数长度必须一致
     * @param params
     */
	public static void checkGroupParamLength(List<Param> params) {
	}

	public static List<Param> getParamsByNames(List<String> param_names, Env env) {
		return getParamsByNames(-1, param_names, env);
	}

	public static List<Param> getParamsByNames(int stage,
			List<String> param_names, Env env) {
		List<Param> param_list = new ArrayList<Param>();
		 // 遍历命令中所要使用到的参数
		for (String name : param_names) {
			Param param = env.getParam(stage, name);
			logger.debug("stage [{}]get params[{}] all values",stage,param);
			param = (param == null) ? env.getParam(name) : param;
			if (param == null) {
				throw new CmdParamIsNotExistException().addScene("PARAM", name);
			}
			param_list.add(param);
		}
		return param_list;
	}

	public static String resolveGroup(String name) {
		int idx = name.lastIndexOf(46);
		return ((idx > 0) ? name.substring(0, idx) : "");
	}

	 /**
     * Description: 获取命令中参数列表
     * @param code
     * @return
     */
	public static List<String> getParamInCode(String code) {
		List<String> param_list = new ArrayList<String>();
		// 正则表达式 匹配“${ was.was }”这种类别的其中空格可有可无
		String match_group = "\\$\\{\\s*\\w+\\.\\w+\\s*\\}";
		Pattern regex_group = Pattern.compile(match_group);
		Matcher m_group = regex_group.matcher(code);
		 // 获取命令中匹配正则表达式的参数加入到列表中
		while (m_group.find()) {
			String param_group = m_group.group().substring(2,
					m_group.group().length() - 1);
			if (!(param_list.contains(param_group)))
			param_list.add(param_group.trim());
		}
		 // 正则表达式 匹配“${ was }”这种类别的其中空格可有可无
		String match_single = "\\$\\{\\s*\\w+\\s*\\}";
		Pattern regex_single = Pattern.compile(match_single);
		Matcher m_single = regex_single.matcher(code);
		// 获取命令中匹配正则表达式的参数加入到列表中
		while (m_single.find()) {
			String param_single = m_single.group().substring(2,
					m_single.group().length() - 1);
			if (!(param_list.contains(param_single)))
			param_list.add(param_single.trim());
		}

		return param_list;
	}
}