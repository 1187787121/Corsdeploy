/**
 * Title: ExeScriptService.java
 * File Description: 构建配置公共服务
 * @copyright: 2016
 * @company: CORSWORK
 * @author: xuph
 * @version: 1.0
 * @date: 2016年12月9日
 */
package com.wk.cd.build.ea.service;

import java.io.File;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.parser.CCJSqlParserManager;
import net.sf.jsqlparser.statement.Statement;
import net.sf.jsqlparser.statement.delete.Delete;
import net.sf.jsqlparser.statement.insert.Insert;
import net.sf.jsqlparser.statement.select.Select;
import net.sf.jsqlparser.statement.update.Update;

import org.apache.commons.lang.exception.ExceptionUtils;

import com.wk.cd.build.ea.bean.AddBuildExeScriptInputBean;
import com.wk.cd.build.ea.dao.BuildScriptDaoService;
import com.wk.cd.build.ea.dao.InstanceExeDaoService;
import com.wk.cd.build.ea.dao.UuParamDaoService;
import com.wk.cd.build.ea.dao.UuSocDaoService;
import com.wk.cd.build.ea.info.BuildScriptInfo;
import com.wk.cd.build.ea.info.InstanceExeInfo;
import com.wk.cd.build.ea.info.UuParamInfo;
import com.wk.cd.build.ea.info.UuSocInfo;
import com.wk.cd.build.en.dao.CeServerDaoService;
import com.wk.cd.build.en.info.CeServerInfo;
import com.wk.cd.build.en.service.ServerCommonService;
import com.wk.cd.build.exc.EnvTaskIsNotExistException;
import com.wk.cd.build.exc.ExeCompModuleTypeExistException;
import com.wk.cd.build.exc.ServerDsIsExistException;
import com.wk.cd.build.exc.ServerDsNotValidException;
import com.wk.cd.build.exc.SqlParserException;
import com.wk.cd.build.exc.SqlTypeGetException;
import com.wk.cd.common.cm.dao.CmSeqDaoService;
import com.wk.cd.common.util.Assert;
import com.wk.cd.common.util.DESUtil;
import com.wk.cd.enu.CMD_STATUS;
import com.wk.cd.enu.EXE_RESULT;
import com.wk.cd.enu.EXE_STATUS;
import com.wk.cd.enu.IMPL_TYPE;
import com.wk.cd.enu.MODIFY_FLAG;
import com.wk.cd.enu.MODULE_TYPE;
import com.wk.cd.enu.PROTOCOL_TYPE;
import com.wk.cd.enu.SCRIPT_METHOD;
import com.wk.cd.enu.SCRIPT_TYPE;
import com.wk.cd.enu.SQL_TYPE;
import com.wk.cd.module1.Process;
import com.wk.cd.module1.ProcessManager;
import com.wk.cd.module1.Result;
import com.wk.cd.module1.bean.StageSourceBean;
import com.wk.cd.module1.entity.Component;
import com.wk.cd.module1.entity.Instance;
import com.wk.cd.module1.entity.Param;
import com.wk.cd.module1.entity.Phase;
import com.wk.cd.module1.entity.PhaseParam;
import com.wk.cd.module1.entity.Script;
import com.wk.cd.module1.service.InstanceGenerateService;
import com.wk.cd.module1.service.ModuleCommonService;
import com.wk.cd.module1.service.TextLogInterceptor;
import com.wk.cd.module1.xml.XmlUtils;
import com.wk.cd.module1.xml1.XmlReader;
import com.wk.cd.module1.xml1.XmlWriter;
import com.wk.cd.remote.jc.bean.JDBCBean;
import com.wk.cd.remote.jc.service.JDBCRCallService;
import com.wk.cd.system.dt.info.DtSourceInfo;
import com.wk.cd.system.dt.service.DtSocService;
import com.wk.lang.EIterable;
import com.wk.lang.Inject;
import com.wk.logging.Log;
import com.wk.logging.LogFactory;
import com.wk.sdo.Field;
import com.wk.sdo.ServiceData;
import com.wk.util.FileUtil;
import com.wk.util.JaDateTime;

/**
 * Class Description: 构建配置公共服务
 * @author xuph
 */
public class ExeScriptPublicService {
	@Inject
	private BuildScriptDaoService buildScriptDaoSrv;
	@Inject
	private ServerCommonService serverCommonService;
	@Inject
	private BuildTaskLogGenService buildTkLogSrv;
	@Inject
	private ModuleCommonService moduleCommonService;
	@Inject
	private UuParamDaoService uuParamDaoSrv;
	@Inject
	private InstanceExeDaoService instanExeDaoSrv;
	@Inject
	private DtSocService dtSocService;
	@Inject
	private UuSocDaoService uuSocDaoSrv;
	@Inject
	private CeServerDaoService ceServerDaoService;
	@Inject
	private JDBCRCallService jdbcCallSrv;
	@Inject
	private CmSeqDaoService cmsvc;
	@Inject
	private InteTaskInstanceService inteTaskInstanceService;
	@Inject
	private InstanceGenerateService instanceGenerateService;
	private static final Log logger = LogFactory.getLog();

	/**
	 * Description: 构建配置的合法性校检
	 * @param script_method
	 * @param comp_id
	 * @param comp_cn_name
	 * @param script_text
	 */
	public void checkExeScript(SCRIPT_METHOD script_method, String comp_id, String comp_cn_name, String[] script_text) {
		if (script_method == SCRIPT_METHOD.COMP) {
			Assert.assertNotEmpty(comp_id, AddBuildExeScriptInputBean.IDCN);
			Assert.assertNotEmpty(comp_cn_name, AddBuildExeScriptInputBean.CN_NAMECN);
			// 校检组件是否存在
			moduleCommonService.checkCompIdIsExist(comp_id, MODULE_TYPE.COMPONENT);
		}
		if (script_method == SCRIPT_METHOD.SHELL) {
			Assert.assertNotEmpty(script_text, AddBuildExeScriptInputBean.SCRIPT_TEXTCN);
		}
		if (script_method == SCRIPT_METHOD.SQL) {
			Assert.assertNotEmpty(script_text, AddBuildExeScriptInputBean.SCRIPT_TEXTCN);
		}

	}

	/**
	 * Description: 保存数据源服务器信息
	 * @param soc_name
	 * @param ser_name
	 * @return
	 */
	public String saveExesocServer(List<UuSocInfo> soc_list) {
		List<UuSocInfo> list = new ArrayList<UuSocInfo>();
		List<String> name_list = new ArrayList<String>();
		// 生成数据源UUID
		String soc_uuid = UUID.randomUUID().toString().replace("-", "");
		int i = 1;
		for (UuSocInfo exsoc : soc_list) {
			// 校检数据源是否存在
			CeServerInfo server_info = ceServerDaoService.getInfoByServerName(exsoc.getExe_server_name());
			DtSourceInfo info = dtSocService.getInfoByKey(exsoc.getExe_soc_name(),server_info.getServer_ip());
			if (Assert.isEmpty(info)) {
				throw new ServerDsIsExistException().addScene("SERVER", exsoc.getExe_server_name()).addScene("SOC", exsoc.getExe_soc_name());
			}
			// 校检服务器是否存在
			serverCommonService.checkServerIsExist(exsoc.getExe_server_name());
			UuSocInfo exesocInfo = new UuSocInfo();
			exesocInfo.setSoc_uuid(soc_uuid);
			exesocInfo.setSoc_bk_seq(i);
			exesocInfo.setExe_soc_name(exsoc.getExe_soc_name());
			exesocInfo.setExe_server_name(exsoc.getExe_server_name());
			if (name_list.contains(exsoc.getExe_soc_name())) {
				throw new ServerDsNotValidException();
			}
			name_list.add(exsoc.getExe_soc_name());
			list.add(exesocInfo);
			i++;
		}
		// 插入数据
		uuSocDaoSrv.insertListInfo(list);
		return soc_uuid;
	}

	/**
	 * Description: 获取一个构建的处理序号
	 * @param script_type
	 * @param work_id
	 * @return
	 */
	public long getNextScriptBkSeq(String work_id, SCRIPT_TYPE script_type) {
		return buildScriptDaoSrv.countBuildScript(work_id, script_type) + 1;
	}

	/**
	 * Description: 保存实例执行表
	 * @param soc_list
	 * @param inst_id
	 */
	public void saveScriptExe(List<UuSocInfo> soc_list, String inst_id) {
		List<InstanceExeInfo> exe_list = new ArrayList<InstanceExeInfo>();
		int i = 0;
		for (UuSocInfo UuSocInfo : soc_list) {
			InstanceExeInfo exe = new InstanceExeInfo();
			exe.setInst_bk_no(i);
			exe.setTpl_bk_no(i);
			exe.setInstance_id(inst_id);
			exe.setExe_status(EXE_STATUS.PENDING);
			exe.setSoc_name(UuSocInfo.getExe_soc_name());
			exe.setServer_name(UuSocInfo.getExe_server_name());
			exe_list.add(exe);
			i++;
		}
		instanExeDaoSrv.insertListInfo(exe_list);
	}

	/**
	 * Description: 保存组件参数信息
	 * @param param_list
	 */
	public void saveUuParamInfo(List<UuParamInfo> param_list, String parm_uuid) {
		List<UuParamInfo> uparm_list = new ArrayList<UuParamInfo>();
		if (!Assert.isEmpty(param_list)) {
			for (UuParamInfo paramInfo : param_list) {
				UuParamInfo uparm = new UuParamInfo();
				uparm.setParam_uuid(parm_uuid);
				uparm.setParam_bk_desc(paramInfo.getParam_bk_desc());
				uparm.setParam_cn_name(paramInfo.getParam_cn_name());
				uparm.setParam_group(paramInfo.getParam_group());
				uparm.setParam_name(paramInfo.getParam_name());
				uparm.setParam_type(paramInfo.getParam_type());
				uparm.setParam_value(paramInfo.getParam_value());
				uparm.setParam_modify_flag(MODIFY_FLAG.NO);
				uparm_list.add(uparm);
			}
		}
		uuParamDaoSrv.insertListInfo(uparm_list);
	}

	/**
	 * Description: 校检构建信息是否存在，不存在抛出异常
	 * @param work_id
	 * @param script_bk_seq
	 * @param script_type
	 */
	public void checkExeScriptIsExist(String work_id, long script_bk_seq, SCRIPT_TYPE script_type) {
		if (Assert.isEmpty(buildScriptDaoSrv.getScriptByKey(work_id, script_bk_seq, script_type))) {
			throw new EnvTaskIsNotExistException().addScene("TASK", work_id);
		}
	}

	/**
	 * Description: 执行构建
	 * @param work_id
	 * @param script_bk_seq
	 * @param script_type
	 */
	public void exeScript(String work_id, long script_bk_seq, SCRIPT_TYPE script_type) {
		BuildScriptInfo bscript = buildScriptDaoSrv.getScriptByKey(work_id, script_bk_seq, script_type);
		String inst_id = bscript.getInstance_id();
		SCRIPT_METHOD method = bscript.getScript_method();
		if (method == SCRIPT_METHOD.SQL) {
			exeScriptSql(bscript);
		} else {
			Process process = null;
			int total = 0;
			try {
				process = ProcessManager.instance.getProcessInstance(inst_id);
				total = process.getCtx().getInstance_info().getPhaseCount();
				// 日志写入
				String log_path = buildTkLogSrv.generateinstLogPath(work_id, inst_id, false);
				process.addInterceptor(new TextLogInterceptor(log_path, total, "构建应用部署:" + work_id));
			} catch (Exception e1) {
				logger.debug(e1.getMessage());
				buildScriptDaoSrv.updateScriptStatusInfoByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, work_id, script_bk_seq, script_type);
			}
			logger.info("构建执行总步骤total=[{}]步", total);
			boolean mark = true;
			Result result = null;
			logger.info("构建执行开始-------------------------------------------------------");
			for (int j = 0; j < total; j++) {
				logger.info("构建执行第[{}]步", j + 1);
				// 更新执行开始时间
				instanExeDaoSrv.updateExeStarBkTmByKey(JaDateTime.now(), EXE_STATUS.RUNNING, inst_id, j);
				cmsvc.getSession().commitAndResume();
				try {
					String remote_relative_dir = "compTest/" + work_id + j;
					result = process.runStage(remote_relative_dir, j, false);
//					result = process.run(j);
					CMD_STATUS status = result.getStatus();
					String msg = result.getMsg();
					if (!Assert.isEmpty(msg)) {
						if (msg.length() > 500) {
							msg = msg.substring(0, 500);
						}
						if (msg.indexOf(("command not found")) != -1) {
							status = CMD_STATUS.ERROR;
						}
					}
					// 更新执行信息
					instanExeDaoSrv.updateExeMsgByKey(msg, inst_id, j);
					if (status == CMD_STATUS.SUCCEED) {
						if (Assert.isEmpty(msg)) {
							instanExeDaoSrv.updateExeMsgByKey("脚本执行成功!", inst_id, j);
							cmsvc.getSession().commitAndResume();
						}
						instanExeDaoSrv.updateExeEndBkTmByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.SUCCESS, inst_id, j);
						cmsvc.getSession().commitAndResume();
						// 插入耗时
						updateExeCostTm(inst_id, j);
					} else {
						mark = false;
						instanExeDaoSrv.updateExeEndBkTmByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, inst_id, j);
						cmsvc.getSession().commitAndResume();
						// 插入耗时
						updateExeCostTm(inst_id, j);
						// 修改构建的时间和状态
						buildScriptDaoSrv.updateScriptStatusInfoByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, work_id, script_bk_seq, script_type);
						break;
					}
				} catch (Exception e) {
					mark = false;
					instanExeDaoSrv.updateExeEndBkTmByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, inst_id, j);
					cmsvc.getSession().commitAndResume();
					// 插入耗时
					updateExeCostTm(inst_id, j);
					// 修改构建的时间和状态
					buildScriptDaoSrv.updateScriptStatusInfoByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, work_id, script_bk_seq, script_type);
					break;
				}
			}
			logger.info("构建执行结束-------------------------------------------------------");
			if (mark) {
				buildScriptDaoSrv.updateScriptStatusInfoByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.SUCCESS, work_id, script_bk_seq, script_type);
				cmsvc.getSession().commitAndResume();
				BuildScriptInfo script_exe = buildScriptDaoSrv.getScriptByKey(work_id, script_bk_seq, script_type);
				JaDateTime start = script_exe.getStart_bk_tm();
				JaDateTime end = script_exe.getEnd_bk_tm();
				int time_used = getCostTm(start, end);
				buildScriptDaoSrv.updateScriptTimeByKey(time_used, work_id, script_bk_seq, script_type);
			}
		}
	}

	/**
	 * Description: SQl脚本执行
	 * @param bscript
	 */
	private void exeScriptSql(BuildScriptInfo bscript) {
		String soc_uuid = bscript.getSoc_uuid();
		String sql_text = bscript.getScript_text();
		String inst_id = bscript.getInstance_id();
		String work_id = bscript.getWork_id();
		long script_bk_seq = bscript.getScirpt_bk_seq();
		SCRIPT_TYPE script_type = bscript.getScript_type();
		boolean state = true;
		if (!Assert.isEmpty(sql_text)) {
			String sql_rp = sql_text.replace("\n", "");
			List<String> sql_list = splitSql(sql_rp);
			List<UuSocInfo> soc_list = uuSocDaoSrv.queryListInfoByUU(soc_uuid);
			if (!Assert.isEmpty(soc_list)) {
				int total = soc_list.size();
				for (int i = 0; i < total; i++) {
					// 更新执行开始时间
					instanExeDaoSrv.updateExeStarBkTmByKey(JaDateTime.now(), EXE_STATUS.RUNNING, inst_id, i);
					cmsvc.getSession().commitAndResume();
					if (!Assert.isEmpty(sql_list)) {
						for (String sql : sql_list) {
							SQL_TYPE type = getSqlType(sql);
							if (type == SQL_TYPE.SELECT) {
								boolean mark = executeQuerySql(sql, soc_list.get(i), inst_id, i, script_bk_seq, work_id, script_type);
								if (mark == false) {
									state = false;
									break;
								}
							} else {
								boolean mark = executeModifySql(sql, soc_list.get(i), inst_id, i, script_bk_seq, work_id, script_type);
								if (mark == false) {
									state = false;
									break;
								}
							}
						}
					}
				}
			}
		}
		if (state) {
			buildScriptDaoSrv.updateScriptStatusInfoByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.SUCCESS, work_id, script_bk_seq, script_type);
			cmsvc.getSession().commitAndResume();
			BuildScriptInfo script_exe = buildScriptDaoSrv.getScriptByKey(work_id, script_bk_seq, script_type);
			JaDateTime start = script_exe.getStart_bk_tm();
			JaDateTime end = script_exe.getEnd_bk_tm();
			int time_used = getCostTm(start, end);
			buildScriptDaoSrv.updateScriptTimeByKey(time_used, work_id, script_bk_seq, script_type);
		}
	}

	/**
	 * Description: 执行select查询语句
	 * @param sql
	 * @param soc_name
	 * @param i
	 * @param inst_id
	 * @param script_type
	 * @param work_id
	 * @param script_bk_seq
	 * @return
	 */
	private boolean executeQuerySql(String sql, UuSocInfo exe_soc, String inst_id, int i, long script_bk_seq, String work_id, SCRIPT_TYPE script_type) {
		logger.debug("执行sql[{}]数据源是[{}]", sql, exe_soc.getExe_soc_name());
		boolean mark = true;
		CeServerInfo server_info = ceServerDaoService.getInfoByServerName(exe_soc.getExe_server_name());
		DtSourceInfo dt_source_info = dtSocService.getInfoByKey(exe_soc.getExe_soc_name(),server_info.getServer_ip());
		JDBCBean jdbc_bean = getJdbcBean(dt_source_info);
		logger.debug("用户名[{}]密码[{}]", jdbc_bean.getRemote_uname(), "******");
		List<String> list = new ArrayList<String>();
		list.add(sql);
		jdbc_bean.setSql_lst(list);
		try {
			List<ServiceData> exe_data = jdbcCallSrv.executeQuerySQL(jdbc_bean);
			if (!Assert.isEmpty(exe_data)) {
				StringBuffer msgs = new StringBuffer();
				for (ServiceData sd : exe_data) {
					Set<Entry<String, Field>> field = sd.entrySet();
					for (Entry<String, Field> entry : field) {
						msgs.append(entry.getKey() + ":" + entry.getValue().getString() + ";");
					}
					msgs.append("\n");
				}
				String mssg = msgs.toString();
				if (!Assert.isEmpty(mssg)) {
					mssg = mssg.length() > 490 ? mssg.substring(0, 490) : mssg;
				}
				instanExeDaoSrv.updateExeMsgByKey(mssg, inst_id, i);
			}
			instanExeDaoSrv.updateExeEndBkTmByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.SUCCESS, inst_id, i);
			cmsvc.getSession().commitAndResume();
			// 插入耗时
			updateExeCostTm(inst_id, i);
		} catch (Exception e) {
			mark = false;
			logger.debug("执行错误信息：[{}]", ExceptionUtils.getStackTrace(e));
			String msg = ExceptionUtils.getStackTrace(e);
			if (!Assert.isEmpty(msg)) {
				msg = msg.length() > 450 ? msg.substring(0, 450) : msg;
			}
			// 更新执行信息
			instanExeDaoSrv.updateExeMsgByKey(msg, inst_id, i);
			cmsvc.getSession().commitAndResume();
			instanExeDaoSrv.updateExeEndBkTmByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, inst_id, i);
			cmsvc.getSession().commitAndResume();
			// 插入耗时
			updateExeCostTm(inst_id, i);
			// 修改构建的时间和状态
			buildScriptDaoSrv.updateScriptStatusInfoByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, work_id, script_bk_seq, script_type);
		}
		return mark;
	}

	/**
	 * Description: 执行update、delecte、insert语句
	 * @param sql
	 * @param soc_name
	 * @param i
	 * @param inst_id
	 * @param script_type
	 * @param work_id
	 * @param script_bk_seq
	 * @return
	 */
	private boolean executeModifySql(String sql, UuSocInfo exe_soc, String inst_id, int i, long script_bk_seq, String work_id, SCRIPT_TYPE script_type) {
		logger.debug("-------executeModifySql begin------");
		boolean mark = true;
		CeServerInfo server_info = ceServerDaoService.getInfoByServerName(exe_soc.getExe_server_name());
		DtSourceInfo dt_source_info = dtSocService.getInfoByKey(exe_soc.getExe_soc_name(),server_info.getServer_ip());
		JDBCBean jdbc_bean = getJdbcBean(dt_source_info);
		List<String> list = new ArrayList<String>();
		list.add(sql);
		jdbc_bean.setSql_lst(list);
		List<JDBCBean> jdbc_bean_list = new ArrayList<JDBCBean>();
		jdbc_bean_list.add(jdbc_bean);
		try {
			jdbcCallSrv.executeModifySQL(jdbc_bean_list);
			instanExeDaoSrv.updateExeEndBkTmByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.SUCCESS, inst_id, i);
			cmsvc.getSession().commitAndResume();
			// 插入耗时
			updateExeCostTm(inst_id, i);
		} catch (Exception e) {
			mark = false;
			logger.info(e.toString(), e);
			String msg = ExceptionUtils.getStackTrace(e);
			if (!Assert.isEmpty(msg)) {
				msg = msg.length() > 450 ? msg.substring(0, 450) : msg;
			}
			// 更新执行信息
			instanExeDaoSrv.updateExeMsgByKey(msg, inst_id, i);
			cmsvc.getSession().commitAndResume();
			instanExeDaoSrv.updateExeEndBkTmByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, inst_id, i);
			cmsvc.getSession().commitAndResume();
			// 插入耗时
			updateExeCostTm(inst_id, i);
			// 修改构建的时间和状态
			buildScriptDaoSrv.updateScriptStatusInfoByKey(JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, work_id, script_bk_seq, script_type);
		}
		logger.debug("-------executeModifySql end------");
		return mark;
	}

	/**
	 * Description: 根据DtSourceInfo获取JDBCBean
	 * @param dt_source_info
	 * @return
	 */
	private JDBCBean getJdbcBean(DtSourceInfo dt_source_info) {
		logger.debug("get JDBCBean by[{}]", dt_source_info.getSoc_name());
		JDBCBean jdbc_bean = new JDBCBean();
		jdbc_bean.setSoc_name(dt_source_info.getSoc_name());
		jdbc_bean.setJdbc_url(dt_source_info.getJdbc_url());
		jdbc_bean.setJdbc_driver(dt_source_info.getJdbc_drv());
		jdbc_bean.setJdbc_schema(dt_source_info.getJdbc_schema());
		logger.debug("current dtsource protocol-type[{}]", dt_source_info.getProtocol_type().getCname());
		jdbc_bean.setProtocol_type(dt_source_info.getProtocol_type());
		// 对加密的密码 进行解密
		String remote_passwd = decryptPassword(dt_source_info.getRemote_passwd(), dt_source_info.getKey_remote_passwd());
		jdbc_bean.setRemote_passwd(remote_passwd);
		jdbc_bean.setRemote_uname(dt_source_info.getRemote_uname());
		jdbc_bean.setSoc_ip(dt_source_info.getSoc_ip());
		jdbc_bean.setSoc_port(dt_source_info.getSoc_port());
		logger.debug("get JDBCBean SUCCESSFUL ");
		return jdbc_bean;

	}

	/**
	 * Description: 对数据源的远程访问密码 进行解密
	 * @param password
	 * @param key
	 * @return
	 */
	private String decryptPassword(String password, String key) {
		String en_key = DESUtil.docryptAllowReverse(false, null, key);
		String en_passwd = DESUtil.docryptAllowReverse(false, en_key, password).trim();
		return en_passwd;
	}

	/**
	 * Description:根据sql语句判断sql类别 ,只能支持select，update，insert，delete
	 * @param sql
	 * @return
	 */
	private SQL_TYPE getSqlType(String sql) {
		logger.debug("获取sql[{}]的sql类型", sql);
		Statement stmt = checkSql(sql);
		if (stmt instanceof Delete) {
			return SQL_TYPE.DELETE;
		} else if (stmt instanceof Select) {
			return SQL_TYPE.SELECT;
		} else if (stmt instanceof Update) {
			return SQL_TYPE.UPDATE;
		} else if (stmt instanceof Insert) {
			return SQL_TYPE.INSERT;
		} else {
			throw new SqlTypeGetException().addScene("SQL", sql);
		}
	}

	/**
	 * Description: 判断SQL语句是否合法
	 * @param sql
	 */
	private Statement checkSql(String sql) {
		try {
			CCJSqlParserManager parserManager = new CCJSqlParserManager();
			parserManager.parse(new StringReader(sql));
			Statement stmt = parserManager.parse(new StringReader(sql));
			return stmt;
		} catch (JSQLParserException e) {
			logger.error(e.toString(), e);
			throw new SqlParserException().addScene("SQL", sql).addScene("REASON", "语法错误");
		}
	}

	/**
	 * Description:将传入的sql按照“；;”分开
	 * @param sql_txt
	 * @return
	 */
	private List<String> splitSql(String sql_txt) {
		List<String> sql_list = new ArrayList<String>();
		// 把其中一个或多个“；”替换为";"
		if (sql_txt.contains("；")) {
			Pattern p = Pattern.compile("；");
			Matcher m = p.matcher(sql_txt);
			while (m.find()) {
				sql_txt = m.replaceAll(";");
			}
		}

		if (sql_txt.contains(";")) {
			String[] strs = sql_txt.split(";");
			for (String sql : strs) {
				if (!Assert.isEmpty(sql) && sql.trim().length() != 0 && !sql.trim().equals("")) {
					sql_list.add(sql);
				}
			}
		} else {
			sql_list.add(sql_txt);
		}
		return sql_list;
	}

	/**
	 * Description: 获得耗时
	 * @param start
	 * @param end
	 * @return
	 */
	private int getCostTm(JaDateTime start, JaDateTime end) {
		int time_used = 0;
		if (!Assert.isEmpty(start) && !Assert.isEmpty(end)) {
			int time_use = (int) (end.longValue() - start.longValue());
			time_used = time_use / 1000;
		}
		return time_used;
	}

	/**
	 * Description: 更新耗时
	 * @param inst_id
	 * @param j
	 */
	private void updateExeCostTm(String inst_id, int j) {
		// 插入耗时
		InstanceExeInfo exe_info = instanExeDaoSrv.getExeInstByKey(inst_id, j);
		JaDateTime start = exe_info.getStart_bk_tm();
		JaDateTime end = exe_info.getEnd_bk_tm();
		int time_used = getCostTm(start, end);
		instanExeDaoSrv.updateCostTmBykey(time_used, inst_id, j);
		cmsvc.getSession().commitAndResume();
	}

	/**
	 * Description: 根据脚本类型生成日志
	 * @return
	 */
	public List<String> generateScriptLogByType(String work_id, SCRIPT_TYPE script_type, long script_bk_seq, List<String> content_list) {
		content_list.add("--------------------------" + script_type.getCname() + "--------------------------");
		content_list.add("");
		BuildScriptInfo script_info = buildScriptDaoSrv.getScriptByKey(work_id, script_bk_seq, script_type);
		String log_path = script_info.getExelog_bk_path();
		if (!Assert.isEmpty(log_path)) {
			content_list = readFileToStrList(log_path, content_list);
		} else {
			content_list.add("暂无日志");
		}
		content_list.add("");
		return content_list;
	}

	/**
	 * Description: 按行读取文件内容，返回字符串列表
	 * @param content_list
	 * @return
	 */
	private List<String> readFileToStrList(String file_path, List<String> content_list) {
		if (!Assert.isEmpty(file_path)) {
			File file = new File(file_path);
			if (file.exists()) {
				EIterable<String> eit = FileUtil.lineReader(file);
				Iterator<String> it = eit.iterator();
				while (it.hasNext()) {
					content_list.add(it.next());
				}
			}
		}
		return content_list;
	}

	/**
	 * Description: 获得构建执行的日志列表
	 * @param work_id
	 * @param script_type
	 * @return
	 */
	public List<String> getExeScriptLogList(String work_id, SCRIPT_TYPE script_type) {
		List<BuildScriptInfo> bdst_list = buildScriptDaoSrv.getScriptByIdAndType(work_id, script_type);
		List<String> log_list = new ArrayList<String>();
		if (!Assert.isEmpty(bdst_list)) {
			for (BuildScriptInfo bsp : bdst_list) {
				log_list.add(bsp.getExelog_bk_path());
			}
		}
		return log_list;
	}

	/**
	 * Description: 保存构建信息（配置）
	 * @param script_method
	 * @param script_type
	 * @param param_list
	 * @param soc_list
	 * @param script_text
	 * @param work_id
	 * @param exe_user_id
	 * @param comp_cn_name
	 * @param comp_id
	 * @return
	 */
	public void saveBuildExeScriptMsg(SCRIPT_METHOD script_method, SCRIPT_TYPE script_type, List<UuParamInfo> param_list, List<UuSocInfo> soc_list, String[] script_text,
			String work_id, long scirpt_bk_seq, String exe_user_id, String comp_cn_name, String comp_id) {
		// 数据准备
		BuildScriptInfo script_data = new BuildScriptInfo();
		// 生成实例
		String inst_id = getInstanceId(script_method, param_list, soc_list, script_text, comp_id);
		String log_path = buildTkLogSrv.generateinstLogPath(work_id, inst_id, false);
		if (script_method == SCRIPT_METHOD.SHELL) {
			script_data.setScript_method(SCRIPT_METHOD.SHELL);
			StringBuffer str = new StringBuffer();
			for (String cmd : script_text) {
				str.append(cmd);
				str.append("\n");
			}
			script_data.setScript_text(str.toString());
		}
		if (script_method == SCRIPT_METHOD.SQL) {
			script_data.setScript_method(SCRIPT_METHOD.SQL);
			StringBuffer str = new StringBuffer();
			for (String cmd : script_text) {
				str.append(cmd);
			}
			List<String> sql_list = splitSql(str.toString());
			for (String strs : sql_list) {
				checkSql(strs);
			}
			script_data.setScript_text(str.toString());
		}
		if (script_method == SCRIPT_METHOD.COMP) {
			// 参数UUID
			String parm_uuid = UUID.randomUUID().toString().replace("-", "");
			logger.info("参数配置参数编号parm_uuid=[{}]", parm_uuid);
			script_data.setScript_method(SCRIPT_METHOD.COMP);
			script_data.setModule_cn_name(comp_cn_name);
			script_data.setModule_id(comp_id);
			script_data.setModule_param_uuid(parm_uuid);
			// 保存组件参数
			saveUuParamInfo(param_list, parm_uuid);
			Component component = new Component(comp_id);
			component = XmlReader.read(component);
			script_data.setImpl_type(component.getImpl_type());
		}
		// 保存实例执行信息表
		saveScriptExe(soc_list, inst_id);
		script_data.setWork_id(work_id);
		script_data.setInstance_id(inst_id);
		script_data.setScript_type(script_type);
		script_data.setScirpt_bk_seq(scirpt_bk_seq);
		// 保存执行数据源
		script_data.setSoc_uuid(saveExesocServer(soc_list));
		script_data.setExe_status(EXE_STATUS.PENDING);
		script_data.setExelog_bk_path(log_path);
		script_data.setExe_user_id(exe_user_id);
		script_data.setStart_bk_tm(JaDateTime.now());
		// 保存构建脚本信息
		buildScriptDaoSrv.insertInfo(script_data);
	}

	/**
	 * Description: 生成Phase
	 * @param phase_no
	 * @param phase_name
	 * @param cmds
	 * @param impl_type
	 * @param uu_soc
	 * @param storage_id
	 * @param env_name
	 * @return
	 */
	private Phase genernatePhase(int phase_no, String phase_name, String[] cmds, IMPL_TYPE impl_type, UuSocInfo uu_soc) {
		Phase phase = new Phase();
		phase.setPhase_no(phase_no);
		phase.setPhase_name(phase_name);
		Script script = new Script();
		script.setCmds(cmds);
		script.setScript_type("default");
		phase.setScript(script);
		phase.setImpl_type(impl_type);
		List<Param> params = XmlUtils.matchParams1(phase.getScript().getCmds());
		phase.setParam_list(params);
		List<StageSourceBean> srv_soc = new ArrayList<StageSourceBean>();
		srv_soc.add(uuSocToStageSoc(uu_soc));
		phase.setSrv_soc(srv_soc);
		return phase;
	}

	private StageSourceBean uuSocToStageSoc(UuSocInfo uu_soc){
		StageSourceBean soc_bean = new StageSourceBean();
		if(!Assert.isEmpty(uu_soc.getExe_soc_name())) {
			CeServerInfo server_info = ceServerDaoService.getInfoByServerName(uu_soc.getExe_server_name());
			DtSourceInfo exe_info = dtSocService.getInfoByKey(uu_soc.getExe_soc_name(),server_info.getServer_ip());
			// 数据源类型校检
			PROTOCOL_TYPE type = exe_info.getProtocol_type();
			if (type != PROTOCOL_TYPE.SSH && type != PROTOCOL_TYPE.TELNET && type != PROTOCOL_TYPE.AGENT) {
				throw new ServerDsNotValidException();
			}
			soc_bean.setExe_soc_name(exe_info.getSoc_name());
			soc_bean.setExe_ip(exe_info.getSoc_ip());
			soc_bean.setExe_protocol_type(exe_info.getProtocol_type());
		}
		
		if(!Assert.isEmpty(uu_soc.getVer_soc_name())) {
			CeServerInfo server_info = ceServerDaoService.getInfoByServerName(uu_soc.getVer_server_name());
			DtSourceInfo ver_info = dtSocService.getInfoByKey(uu_soc.getVer_soc_name(),server_info.getServer_ip());
			soc_bean.setVer_soc_name(ver_info.getSoc_name());
			soc_bean.setVer_ip(ver_info.getSoc_ip());
			soc_bean.setVer_protocol_type(ver_info.getProtocol_type());
		}
		return soc_bean;
	}
	
	
	/**
	 * Description: 获得组件实例ID
	 * @param param_list
	 * @param soc_list
	 * @param comp_id
	 * @return
	 */
	private String getComponentInst(List<PhaseParam> params_list, List<UuSocInfo> soc_list, String comp_id) {
		List<Phase> phase_list = new ArrayList<Phase>();
		Phase phase = new Phase();
		
		Component comp = new Component(comp_id);
		comp = XmlReader.read(comp);
		int i = 0;
		for (UuSocInfo exsoc : soc_list) {
			CeServerInfo server_info = ceServerDaoService.getInfoByServerName(exsoc.getExe_server_name());
			DtSourceInfo dtsoc = dtSocService.getInfoByKey(exsoc.getExe_soc_name(),server_info.getServer_ip());
			checkModuleType(comp.getImpl_type(),dtsoc);
			String[] cmds = comp.getScript_list().get(0).getCmds();
			phase = genernatePhase(i, "配置方式是【组件】的执行", cmds, comp.getImpl_type(), exsoc);
			phase_list.add(phase);
			i++;
		}
		Instance inst = instanceGenerateService.phaseListGenerate(phase_list, params_list, null, null, null);
		ProcessManager.instance.buildProcess(inst);
		XmlWriter.write(inst);
		return inst.getInstance_id();
	}

	/**
	 * Description: 组件执行类别和数据源类别校检
	 * @param info
	 * @param dtsoc
	 * @return
	 */
	private void checkModuleType(IMPL_TYPE type, DtSourceInfo dtsoc) {
		if (IMPL_TYPE.SHELL == type) {
			if (PROTOCOL_TYPE.SSH != dtsoc.getProtocol_type() && PROTOCOL_TYPE.TELNET != dtsoc.getProtocol_type() && PROTOCOL_TYPE.AGENT != dtsoc.getProtocol_type()) {
				throw new ExeCompModuleTypeExistException().addScene("SOC",dtsoc.getSoc_name());
			}
		}else if (IMPL_TYPE.SVN == type) {
			if (PROTOCOL_TYPE.SVN != dtsoc.getProtocol_type()) {
				throw new ExeCompModuleTypeExistException().addScene("SOC",dtsoc.getSoc_name());
			}
		}else if(IMPL_TYPE.WAS == type){
			if (PROTOCOL_TYPE.WAS != dtsoc.getProtocol_type()) {
				throw new ExeCompModuleTypeExistException().addScene("SOC",dtsoc.getSoc_name());
			}
		}else if(IMPL_TYPE.FTP == type){
			if (PROTOCOL_TYPE.PLT_FTP != dtsoc.getProtocol_type() && PROTOCOL_TYPE.AGENT != dtsoc.getProtocol_type()) {
				throw new ExeCompModuleTypeExistException().addScene("SOC",dtsoc.getSoc_name());
			}
		}                                                                                         
	}
	
	/**
	 * Description: 生成组件执行实例ID
	 * @param script_method
	 * @param param_list
	 * @param soc_list
	 * @param script_text
	 * @param comp_id
	 * @return
	 */
	public String getInstanceId(SCRIPT_METHOD script_method, List<UuParamInfo> param_list, List<UuSocInfo> soc_list, String[] script_text, String comp_id) {
		String inst_id = null;
		List<PhaseParam> params_list = UuParamInfo.copyToPhaseParams(param_list);
		int i = 0;
		// 脚本方式:[脚本]实例化
		if (script_method == SCRIPT_METHOD.SHELL) {
			logger.debug("脚本方式:[脚本]实例化");
			List<Phase> phase_list = new ArrayList<Phase>();
			Phase phase = new Phase();
			for (UuSocInfo exsoc : soc_list) {
				CeServerInfo server_info = ceServerDaoService.getInfoByServerName(exsoc.getExe_server_name());
				DtSourceInfo dtsoc = dtSocService.getInfoByKey(exsoc.getExe_soc_name(),server_info.getServer_ip());
				// 数据源类型校检
				PROTOCOL_TYPE type = dtsoc.getProtocol_type();
				if (type != PROTOCOL_TYPE.SSH && type != PROTOCOL_TYPE.TELNET) {
					throw new ServerDsNotValidException();
				}
				phase = genernatePhase(i, "配置方式是【脚本】的执行", script_text, IMPL_TYPE.SHELL, exsoc);
				phase_list.add(phase);
				i++;
			}
			Instance inst = instanceGenerateService.phaseListGenerate(phase_list, params_list, null, null, null);
			ProcessManager.instance.buildProcess(inst);
			XmlWriter.write(inst);
			inst_id = inst.getInstance_id();
		}
		// 脚本方式:[组件]实例化
		if (script_method == SCRIPT_METHOD.COMP) {
			inst_id = getComponentInst(params_list, soc_list, comp_id);
		}
		// 暂时不做
		if (script_method == SCRIPT_METHOD.SQL) {
			for (UuSocInfo exsoc : soc_list) {
				CeServerInfo server_info = ceServerDaoService.getInfoByServerName(exsoc.getExe_server_name());
				DtSourceInfo dtsoc = dtSocService.getInfoByKey(exsoc.getExe_soc_name(),server_info.getServer_ip());
				// 数据源类型校检
				PROTOCOL_TYPE type = dtsoc.getProtocol_type();
				if (type != PROTOCOL_TYPE.JDBC) {
					throw new ServerDsNotValidException();
				}
			}
			inst_id = UUID.randomUUID().toString().replace("-", "");
		}
		return inst_id;
	}

	/**
	 * Description: 生成组件执行实例ID
	 * @param script_method
	 * @param param_list
	 * @param soc_list
	 * @param script_text
	 * @param comp_id
	 * @return
	 */
	public String getInstanceId2(SCRIPT_METHOD script_method, List<UuParamInfo> param_list, List<UuSocInfo> soc_list, String[] script_text, String comp_id) {
		Phase phase = new Phase();

		String inst_id = null;
		if (script_method == SCRIPT_METHOD.SHELL) {
			phase.setPhase_no(1);
			phase.setPhase_name("配置方式是【脚本】的执行");
			Script script = new Script();
			logger.info("执行脚本命令script_txt=[{}]", script_text);
			script.setCmds(script_text);
			script.setScript_type("default");
			phase.setScript(script);
			phase.setImpl_type(IMPL_TYPE.SHELL);
			List<StageSourceBean> srv_soc = new ArrayList<StageSourceBean>();
			for (UuSocInfo exsoc : soc_list) {
				srv_soc.add(inteTaskInstanceService.getStageSourceBean(exsoc.getSoc_uuid()));
			}
			phase.setSrv_soc(srv_soc);
		}

		// TemplateInfo template = new TemplateInfo();
		//
		// DefaultEnv env = new DefaultEnv();
		// String inst_id = null;
		// int i = 0;
		// if (script_method == SCRIPT_METHOD.SHELL) {
		// for (UuSocInfo exsoc : soc_list) {
		// DtSourceInfo dtsoc =
		// dtSocService.getInfoByKey(exsoc.getExe_soc_name());
		// // 数据源类型校检
		// PROTOCOL_TYPE type = dtsoc.getProtocol_type();
		// if (type != PROTOCOL_TYPE.SSH && type != PROTOCOL_TYPE.TELNET) {
		// throw new ServerDsNotValidException();
		// }
		// ModuleInfo mdl = new ModuleInfo();
		// logger.info("执行脚本命令script_txt=[{}]", script_text);
		// mdl.setCn_name("配置方式是【脚本】的执行");
		// mdl.setCmds(script_text);
		// mdl.setImpl_type(IMPL_TYPE.SHELL);
		// template.addSub_moduleInfo(mdl);
		// ModuleSourceInfo msi = new
		// ModuleSourceInfo(dtsoc.getProtocol_type(),dtsoc);
		// env.addStageNode(i, msi);
		// i++;
		// }
		//
		// InstanceInfo inst = ProcessManager.instance.prepare(template, env);
		// ProcessManager.instance.buildProcess(inst);
		// XmlWriter.writerInstance(inst);
		// inst_id = inst.getInstanceId();
		// }
		// if (script_method == SCRIPT_METHOD.COMP) {
		// inst_id = getComponentInst(param_list,soc_list,comp_id);
		// }
		// if (script_method == SCRIPT_METHOD.SQL) {
		// for (UuSocInfo exsoc : soc_list) {
		// DtSourceInfo dtsoc =
		// dtSocService.getInfoByKey(exsoc.getExe_soc_name());
		// // 数据源类型校检
		// PROTOCOL_TYPE type = dtsoc.getProtocol_type();
		// if (type != PROTOCOL_TYPE.JDBC) {
		// throw new ServerDsNotValidException();
		// }
		// }
		// inst_id = UUID.randomUUID().toString().replace("-", "");
		// }
		return inst_id;
	}
	/**
	 * Description: 获得构建日志路径
	 * @return
	 */
	/*
	 * private String getScriptLogDirectory(String work_id) { String file_path =
	 * ""; String web_root_dir = CfgTool.getProjectPropterty("web.root.path");
	 * if (Assert.isEmpty(web_root_dir)) { throw new
	 * ReadConfigFileException().addScene("FILE",
	 * "cms.properties").addScene("CONFIG", "web.root.path"); } if
	 * (web_root_dir.endsWith("/")) { file_path = web_root_dir + "task/" +
	 * work_id + "/"; } else { file_path = web_root_dir + "/task/" + work_id +
	 * "/"; } File file = new File(file_path); if (!file.exists()) {
	 * file.mkdirs(); } return file_path; }
	 */

	/**
	 * Description: 备份执行（测试）
	 * @param work_id
	 * @param script_bk_seq
	 * @param script_type
	 */
	/*
	 * public void exe(String work_id, long script_bk_seq, SCRIPT_TYPE
	 * script_type) { BuildScriptInfo bscript =
	 * buildScriptDaoSrv.getScriptByKey(work_id,script_bk_seq, script_type);
	 * SCRIPT_METHOD script_method = bscript.getScript_method(); List<UuSocInfo>
	 * soc_list = new ArrayList<UuSocInfo>(); String uuid =
	 * bscript.getSoc_uuid(); soc_list = uuSocDaoSrv.queryListInfoByUU(uuid);
	 * String[] script_text = bscript.getScript_text().split("\n"); // String
	 * comp_id = bscript.getComp_id(); // String param_uuid =
	 * bscript.getComp_param_uuid(); // List<UuParamInfo> param_lists =
	 * uuParamDaoSrv.getInfoByUuid(param_uuid); // ParamInfo[] param_list =
	 * UuParamInfo.copyToParamInfos(param_lists); String inst_id =
	 * bscript.getInstance_id(); TemplateInfo template = new TemplateInfo();
	 * DefaultEnv env = new DefaultEnv(); int i = 0; if (script_method ==
	 * SCRIPT_METHOD.SHELL) { for (UuSocInfo exsoc : soc_list) { DtSourceInfo
	 * dtsoc = dtSocService.getInfoByKey(exsoc.getExe_soc_name()); // 数据源类型校检
	 * PROTOCOL_TYPE type = dtsoc.getProtocol_type(); if (type !=
	 * PROTOCOL_TYPE.SSH && type != PROTOCOL_TYPE.TELNET) { throw new
	 * ServerDsNotValidException(); } ModuleInfo mdl = new ModuleInfo();
	 * logger.info("执行脚本命令script_txt=[{}]", script_text);
	 * mdl.setCn_name("配置方式是【脚本】的执行"); mdl.setCmds(script_text);
	 * mdl.setImpl_type(IMPL_TYPE.SHELL); mdl.setDt_source(dtsoc);
	 * template.addSub_moduleInfo(mdl); env.addStageNode(i, dtsoc); i++; } }
	 * TemplateInfo template = new TemplateInfo(); DefaultEnv env = new
	 * DefaultEnv(); int i = 0; if (script_method == SCRIPT_METHOD.COMP) {
	 * logger.debug("开始生成组件ID=[{}]执行实例", comp_id); ModuleInfo module =
	 * XmlReader.readerModule(comp_id); template.setParams(module.getParams());
	 * if (!Assert.isEmpty(param_list)) { ParamInfo[] param_infos = param_list;
	 * env = tpCompSrv.getEnvByParam(param_infos);
	 * template.setParams(param_infos); } // ENV中加入数据源
	 * System.out.println("size: "+soc_list.size()); for (UuSocInfo exsoc :
	 * soc_list) { DtSourceInfo dtsoc =
	 * dtSocService.getInfoByKey(exsoc.getExe_soc_name());
	 * checkModuleType(module, dtsoc); module.setDt_source(dtsoc);
	 * template.addSub_moduleInfo(module); env.addStageNode(i, dtsoc); i++; } }
	 * InstanceInfo inst = ProcessManager.instance.prepare(template, env);
	 * Process process = ProcessManager.instance.buildProcess(inst); int total =
	 * inst.getModuleCount(); // --------------------------------------------
	 * Result result = null; boolean mark = true; for (int j = 0; j < total;
	 * j++) { logger.info("构建执行第[{}]步", j + 1); // 更新执行开始时间
	 * buildScriptExeDaoSrv.updateExeStarBkTmByKey(JaDateTime.now(),
	 * EXE_STATUS.RUNNING, inst_id, j); cmsvc.getSession().commitAndResume();
	 * try { result = process.run(j); String msg = result.getMsg(); if
	 * (!Assert.isEmpty(msg)) { if (msg.length() > 500) { msg = msg.substring(0,
	 * 500); } } // 更新执行信息 buildScriptExeDaoSrv.updateExeMsgByKey(msg, inst_id,
	 * j); if (result.getStatus() == CMD_STATUS.SUCCEED) {
	 * buildScriptExeDaoSrv.updateExeEndBkTmByKey( JaDateTime.now(),
	 * EXE_STATUS.EXECUTED, EXE_RESULT.SUCCESS, inst_id, j);
	 * cmsvc.getSession().commitAndResume(); // 插入耗时 updateExeCostTm(inst_id,
	 * j); } else { mark = false; buildScriptExeDaoSrv.updateExeEndBkTmByKey(
	 * JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, inst_id, j);
	 * cmsvc.getSession().commitAndResume(); // 插入耗时 updateExeCostTm(inst_id,
	 * j); // 修改构建的时间和状态 buildScriptDaoSrv.updateScriptStatusInfoByKey(
	 * JaDateTime.now(), EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, work_id,
	 * script_bk_seq, script_type); break; } } catch (Exception e) { mark =
	 * false; buildScriptExeDaoSrv.updateExeEndBkTmByKey(JaDateTime.now(),
	 * EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, inst_id, j);
	 * cmsvc.getSession().commitAndResume(); // 插入耗时 updateExeCostTm(inst_id,
	 * j); // 修改构建的时间和状态
	 * buildScriptDaoSrv.updateScriptStatusInfoByKey(JaDateTime.now(),
	 * EXE_STATUS.EXECUTED, EXE_RESULT.FAIL, work_id, script_bk_seq,
	 * script_type); break; } }
	 * logger.info("构建执行结束-------------------------------------------------------"
	 * ); if (mark) {
	 * buildScriptDaoSrv.updateScriptStatusInfoByKey(JaDateTime.now(),
	 * EXE_STATUS.EXECUTED, EXE_RESULT.SUCCESS, work_id, script_bk_seq,
	 * script_type); cmsvc.getSession().commitAndResume(); BuildScriptInfo
	 * script_exe = buildScriptDaoSrv.getScriptByKey( work_id, script_bk_seq,
	 * script_type); JaDateTime start = script_exe.getStart_bk_tm(); JaDateTime
	 * end = script_exe.getEnd_bk_tm(); int time_used = getCostTm(start, end);
	 * buildScriptDaoSrv.updateScriptTimeByKey(time_used, work_id,
	 * script_bk_seq, script_type); } //
	 * -------------------------------------------- }
	 */
}
