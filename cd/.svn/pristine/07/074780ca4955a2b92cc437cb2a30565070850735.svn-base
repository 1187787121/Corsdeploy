package com.wk.cd.module.impl;

import java.io.IOException;

import com.wk.Controller;
import com.wk.cd.common.util.Assert;
import com.wk.cd.common.util.DESUtil;
import com.wk.cd.common.util.StringUtil;
import com.wk.cd.enu.PROTOCOL_TYPE;
import com.wk.cd.module.info.ModuleSourceInfo;
import com.wk.cd.remote.bean.RBean;
import com.wk.cd.remote.sh.bean.ShExecRsBean;
import com.wk.cd.remote.sh.service.JSchRCallService;
import com.wk.cd.remote.sh.service.RConnection;
import com.wk.cd.remote.sh.service.RSession;
import com.wk.cd.remote.sh.service.TelnetRCallService;
import com.wk.cd.system.dt.info.DtSourceInfo;
import com.wk.lang.Inject;
import com.wk.logging.Log;
import com.wk.logging.LogFactory;

/**
 * 远程Shell会话连接 Created by 姜志刚 on 2016/11/25.
 */
public class ShellSession extends ModuleSessionBase {
	
	private static final Log logger = LogFactory.getLog();
	
	protected static final int DEFAULT_TIMEOUT = 3600;

	@Inject
	private JSchRCallService ssh_svc;

	@Inject
	private TelnetRCallService telnet_svc;
	private RConnection conn;
	private RSession sess;

	public ShellSession(ModuleSourceInfo module_source_info) {
		this.module_source_info = module_source_info;
		Controller.getInstance().getInjector().inject(this);
	}

	@Override
	protected void implConnect() {
		DtSourceInfo dt_info = module_source_info.getDt_source_info();
		try {
			PROTOCOL_TYPE protocol_type = dt_info.getProtocol_type();
			RBean bean = getRBeanFromSoc(dt_info);
			if (protocol_type == PROTOCOL_TYPE.SSH) {
				conn = ssh_svc.getConnection(bean);
				sess = ssh_svc.openSession(this.conn);
			} else if (protocol_type == PROTOCOL_TYPE.TELNET) {
				conn = telnet_svc.getConnection(bean);
				sess = telnet_svc.openSession(this.conn);
			} else {
				throw new RuntimeException(bean.getProtocol_type()
						+ " not supported");
			}
			String vars = dt_info.getEnvironment_variables();
			if (!com.wk.util.StringUtil.isEmpty(vars)) {
				executeEnvironmentVariables(this.sess, dt_info,
						dt_info.getProtocol_type());
			}
			logger.info("{}'s session {} connected", dt_info.getSoc_name(), sess);
		} catch (RuntimeException t) {
			logger.error("连接数据源[{}]异常", dt_info.getSoc_name(), t);
			throw t;
		}
	}

	@Override
	protected void implDisconnect() {
		if (sess != null) {
			sess.disconnect();
		}
		if (conn != null)
			conn.disconnect();
	}

	public ShExecRsBean sendCmd(String cmd) {
		return this.sess.sendCmd(cmd);
	}

	private RBean getRBeanFromSoc(DtSourceInfo dt_info) {
		RBean bean = new RBean();
		bean.setProtocol_type(dt_info.getProtocol_type());
		bean.setRemote_uname(dt_info.getRemote_uname());
		String passed_key = DESUtil.docryptAllowReverse(false, null, dt_info
				.getKey_remote_passwd().trim());
		String remote_passwd = DESUtil.docryptAllowReverse(false, passed_key,
				dt_info.getRemote_passwd());
		bean.setRemote_passwd(remote_passwd.trim());
		bean.setSoc_ip(dt_info.getSoc_ip());
		bean.setSoc_port(dt_info.getSoc_port());
		bean.setSoc_name(dt_info.getSoc_name());
		int timeout = (int) dt_info.getBk_timeout();
		if (timeout != 0)
			bean.setTimeout(timeout);
		else {
			bean.setTimeout(DEFAULT_TIMEOUT);
		}
		return bean;
	}

	/**
	 * Description: 执行环境参数
	 * @param sess
	 * @param dt
	 * @param pro
	 * @throws IOException
	 */
	private void executeEnvironmentVariables(RSession sess, DtSourceInfo dt,
			PROTOCOL_TYPE pro) {
		if ((pro.equals(PROTOCOL_TYPE.SSH))
				|| (pro.equals(PROTOCOL_TYPE.TELNET))) {
			logger.debug("开始执行环境参数");
			String vars = dt.getEnvironment_variables();
			if (!Assert.isEmpty(vars)) {
				String[] var_list = varsSplit(vars);
				for (String var : var_list) {
					logger.debug("当前执行的环境参数[{}]", var);
					sess.sendCmd(var);
				}
			}
		}
	}

	/**
	 * Description: 把传入的参数 按照“；”分隔 再按行读取 返回list
	 * @param vars
	 * @return
	 * @throws IOException
	 */
	private String[] varsSplit(String vars) {
		String vars1 = StringUtil.rpEnter(vars).trim();
		String[] var_array = vars1.split(";");
		return var_array;
	}
}